<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[docker-part5:Stacks]]></title>
      <url>/2017/10/docker-part5-Stacks/</url>
      <content type="html"><![CDATA[<h2 id="新增一个服务（service）visualizer"><a href="#新增一个服务（service）visualizer" class="headerlink" title="新增一个服务（service）visualizer"></a>新增一个服务（service）visualizer</h2><p>修改docker-compose.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  web:</div><div class="line">    # replace username/repo:tag with your name and image details</div><div class="line">    image: username/repo:tag</div><div class="line">    deploy:</div><div class="line">      replicas: 5</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">      resources:</div><div class="line">        limits:</div><div class="line">          cpus: &quot;0.1&quot;</div><div class="line">          memory: 50M</div><div class="line">    ports:</div><div class="line">      - &quot;80:80&quot;</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">  visualizer:</div><div class="line">    image: dockersamples/visualizer:stable</div><div class="line">    ports:</div><div class="line">      - &quot;8080:8080&quot;</div><div class="line">    volumes:</div><div class="line">      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</div><div class="line">    deploy:</div><div class="line">      placement:</div><div class="line">        constraints: [node.role == manager]</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">networks:</div><div class="line">  webnet:</div></pre></td></tr></table></figure></p>
<p>更新服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker stack deploy -c docker-compose.yml getstartedlab</div><div class="line">Creating network getstartedlab_webnet</div><div class="line">Creating service getstartedlab_web</div><div class="line">Creating service getstartedlab_visualizer</div><div class="line"></div><div class="line">➜  docker-test docker-machine ls</div><div class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</div><div class="line">myvm1   *        virtualbox   Running   tcp://192.168.99.100:2376           v17.09.0-ce</div><div class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.09.0-ce</div></pre></td></tr></table></figure></p>
<p>访问 <a href="http://192.168.99.100:8080/" target="_blank" rel="external">http://192.168.99.100:8080/</a></p>
<h2 id="持久化redis数据服务"><a href="#持久化redis数据服务" class="headerlink" title="持久化redis数据服务"></a>持久化redis数据服务</h2><p>修改docker-compose.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  web:</div><div class="line">    # replace username/repo:tag with your name and image details</div><div class="line">    image: 842071912/start-docker1:hellopy</div><div class="line">    deploy:</div><div class="line">      replicas: 5</div><div class="line">      resources:</div><div class="line">        limits:</div><div class="line">          cpus: &quot;0.1&quot;</div><div class="line">          memory: 50M</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">    ports:</div><div class="line">      - &quot;80:80&quot;</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">  visualizer:</div><div class="line">    image: dockersamples/visualizer:stable</div><div class="line">    ports:</div><div class="line">      - &quot;8080:8080&quot;</div><div class="line">    volumes:</div><div class="line">      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</div><div class="line">    deploy:</div><div class="line">      placement:</div><div class="line">        constraints: [node.role == manager]</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">  redis:</div><div class="line">    image: redis</div><div class="line">    ports:</div><div class="line">      - &quot;6379:6379&quot;</div><div class="line">    volumes:</div><div class="line">      - /home/docker/data:/data</div><div class="line">    deploy:</div><div class="line">      placement:</div><div class="line">        constraints: [node.role == manager]</div><div class="line">    command: redis-server --appendonly yes</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">networks:</div><div class="line">  webnet:</div></pre></td></tr></table></figure></p>
<p>创建./data文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker-machine ssh myvm1 &quot;mkdir ./data&quot;</div><div class="line"></div><div class="line">➜  docker-test docker stack deploy -c docker-compose.yml getstartedlab</div><div class="line">Updating service getstartedlab_web (id: p3yof4klife0ulvn7fqwjrhkm)</div><div class="line">Updating service getstartedlab_visualizer (id: s550x4sifn20ab391fsywu0l2)</div><div class="line">Updating service getstartedlab_redis (id: a2eh1a3c3di608fsa00l7uvj8)</div><div class="line"></div><div class="line">➜  docker-test docker service ls</div><div class="line">ID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS</div><div class="line">a2eh1a3c3di6        getstartedlab_redis        replicated          1/1                 redis:latest                      *:6379-&gt;6379/tcp</div><div class="line">s550x4sifn20        getstartedlab_visualizer   replicated          1/1                 dockersamples/visualizer:stable   *:8080-&gt;8080/tcp</div><div class="line">p3yof4klife0        getstartedlab_web          replicated          5/5                 842071912/start-docker1:hellopy   *:80-&gt;80/tcp</div></pre></td></tr></table></figure></p>
<p>访问 <a href="http://192.168.99.100:8080/" target="_blank" rel="external">http://192.168.99.100:8080/</a></p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker-part4:swarms]]></title>
      <url>/2017/10/docker-part4-swarms/</url>
      <content type="html"><![CDATA[<h2 id="设置swarm"><a href="#设置swarm" class="headerlink" title="设置swarm"></a>设置swarm</h2><p>mac系统下需要安装 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">install Oracle VirtualBox</a> </p>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>使用docker-machine创建VMs,创建有可能会失败多执行几次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker-machine ls</div><div class="line">NAME   ACTIVE   DRIVER   STATE   URL   SWARM   DOCKER   ERRORS</div><div class="line"></div><div class="line">➜  docker-test docker-machine create --driver virtualbox myvm1</div><div class="line">Running pre-create checks...</div><div class="line">(myvm1) No default Boot2Docker ISO found locally, downloading the latest release...</div><div class="line">(myvm1) Latest release for github.com/boot2docker/boot2docker is v17.09.0-ce</div><div class="line">(myvm1) Downloading /Users/hanqingsong/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v17.09.0-ce/boot2docker.iso...</div><div class="line">(myvm1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%</div><div class="line">Creating machine...</div><div class="line">(myvm1) Copying /Users/hanqingsong/.docker/machine/cache/boot2docker.iso to /Users/hanqingsong/.docker/machine/machines/myvm1/boot2docker.iso...</div><div class="line">(myvm1) Creating VirtualBox VM...</div><div class="line">(myvm1) Creating SSH key...</div><div class="line">(myvm1) Starting the VM...</div><div class="line">(myvm1) Check network to re-create if needed...</div><div class="line">(myvm1) Found a new host-only adapter: &quot;vboxnet0&quot;</div><div class="line">(myvm1) Waiting for an IP...</div><div class="line">Waiting for machine to be running, this may take a few minutes...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Waiting for SSH to be available...</div><div class="line">Detecting the provisioner...</div><div class="line">Provisioning with boot2docker...</div><div class="line">Copying certs to the local machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Checking connection to Docker...</div><div class="line">Docker is up and running!</div><div class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env myvm1</div><div class="line"></div><div class="line">➜  docker-test docker-machine ls</div><div class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</div><div class="line">myvm1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.09.0-ce</div><div class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.09.0-ce</div></pre></td></tr></table></figure></p>
<h3 id="初始化swarm添加节点"><a href="#初始化swarm添加节点" class="headerlink" title="初始化swarm添加节点"></a>初始化swarm添加节点</h3><p>设置myvm1为swarm管理者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker-machine ssh myvm1 &quot;docker swarm init --advertise-addr 192.168.99.100&quot; </div><div class="line">Swarm initialized: current node (mwshg3zvljp17muqpuua5l3d1) is now a manager.</div><div class="line"></div><div class="line">To add a worker to this swarm, run the following command:</div><div class="line"></div><div class="line">    docker swarm join --token SWMTKN-1-26jjkt2i3rul2qp7hwdp2m3ek1vegmumr6mk07ba8orc886ix2-c41i1zkhtnjqartdv6l75ms8h 192.168.99.100:2377</div><div class="line"></div><div class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</div></pre></td></tr></table></figure></p>
<p>myvm2添加为worker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker-machine ssh myvm2  &quot;docker swarm join --token SWMTKN-1-26jjkt2i3rul2qp7hwdp2m3ek1vegmumr6mk07ba8orc886ix2-c41i1zkhtnjqartdv6l75ms8h 192.168.99.100:2377&quot;</div><div class="line">This node joined a swarm as a worker.</div></pre></td></tr></table></figure></p>
<h3 id="查看swarm节点"><a href="#查看swarm节点" class="headerlink" title="查看swarm节点"></a>查看swarm节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker-machine ssh myvm1 &quot;docker node ls&quot;</div><div class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</div><div class="line">mwshg3zvljp17muqpuua5l3d1 *   myvm1               Ready               Active              Leader</div><div class="line">urdtegb3yanqi0d98vzm49tof     myvm2               Ready               Active</div></pre></td></tr></table></figure>
<h2 id="在swarm集群部署应用"><a href="#在swarm集群部署应用" class="headerlink" title="在swarm集群部署应用"></a>在swarm集群部署应用</h2><p>设置myvm1为激活状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker-machine env myvm1</div><div class="line">export DOCKER_TLS_VERIFY=&quot;1&quot;</div><div class="line">export DOCKER_HOST=&quot;tcp://192.168.99.100:2376&quot;</div><div class="line">export DOCKER_CERT_PATH=&quot;/Users/hanqingsong/.docker/machine/machines/myvm1&quot;</div><div class="line">export DOCKER_MACHINE_NAME=&quot;myvm1&quot;</div><div class="line"># Run this command to configure your shell:</div><div class="line"># eval $(docker-machine env myvm1)</div><div class="line"></div><div class="line">➜  docker-test eval $(docker-machine env myvm1)</div><div class="line"></div><div class="line">➜  docker-test docker-machine ls</div><div class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</div><div class="line">myvm1   *        virtualbox   Running   tcp://192.168.99.100:2376           v17.09.0-ce</div><div class="line">myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.09.0-ce</div></pre></td></tr></table></figure></p>
<p>在swarm manager部署应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker stack deploy -c docker-compose.yml getstartedlab</div><div class="line">Creating network getstartedlab_webnet</div><div class="line">Creating service getstartedlab_web</div></pre></td></tr></table></figure></p>
<p>查看服务部署信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker stack ps getstartedlab</div><div class="line">ID                  NAME                  IMAGE                             NODE                DESIRED STATE       CURRENT STATE                  ERROR               PORTS</div><div class="line">qvs0h0pqgsou        getstartedlab_web.1   842071912/start-docker1:hellopy   myvm1               Running             Preparing about a minute ago</div><div class="line">jtlfqsejqnmo        getstartedlab_web.2   842071912/start-docker1:hellopy   myvm2               Running             Running 24 seconds ago</div><div class="line">wauh0t4cybvn        getstartedlab_web.3   842071912/start-docker1:hellopy   myvm1               Running             Preparing about a minute ago</div><div class="line">feyi52iwjpa2        getstartedlab_web.4   842071912/start-docker1:hellopy   myvm2               Running             Running 24 seconds ago</div><div class="line">m7mz2kevh15r        getstartedlab_web.5   842071912/start-docker1:hellopy   myvm2               Running             Running 24 seconds ago</div></pre></td></tr></table></figure></p>
<h2 id="清除和重启"><a href="#清除和重启" class="headerlink" title="清除和重启"></a>清除和重启</h2><p> tear down the stack<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> ➜  docker-test docker stack rm getstartedlab</div><div class="line">Removing service getstartedlab_web</div><div class="line">Removing network getstartedlab_webnet</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Keep the swarm or remove it?<br>At some point later, you can remove this swarm if you want to with docker-machine ssh myvm2 “docker swarm leave” on the worker and docker-machine ssh myvm1 “docker swarm leave –force” on the manager, but you’ll need this swarm for part 5, so please keep it around for now. </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  docker-test eval $(docker-machine env -u)</div><div class="line"></div><div class="line"></div><div class="line">➜  docker-test docker-machine stop $(docker-machine ls -q)</div><div class="line">Stopping &quot;myvm2&quot;...</div><div class="line">Stopping &quot;myvm1&quot;...</div><div class="line">Machine &quot;myvm2&quot; was stopped.</div><div class="line">Machine &quot;myvm1&quot; was stopped.</div><div class="line">➜  docker-test docker-machine ls</div><div class="line">NAME    ACTIVE   DRIVER       STATE     URL   SWARM   DOCKER    ERRORS</div><div class="line">myvm1   -        virtualbox   Stopped                 Unknown</div><div class="line">myvm2   -        virtualbox   Stopped                 Unknown</div></pre></td></tr></table></figure>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)</div><div class="line">docker-machine create -d hyperv --hyperv-virtual-switch &quot;myswitch&quot; myvm1 # Win10</div><div class="line">docker-machine env myvm1                # View basic information about your node</div><div class="line">docker-machine ssh myvm1 &quot;docker node ls&quot;         # List the nodes in your swarm</div><div class="line">docker-machine ssh myvm1 &quot;docker node inspect &lt;node ID&gt;&quot;        # Inspect a node</div><div class="line">docker-machine ssh myvm1 &quot;docker swarm join-token -q worker&quot;   # View join token</div><div class="line">docker-machine ssh myvm1   # Open an SSH session with the VM; type &quot;exit&quot; to end</div><div class="line">docker-machine ssh myvm2 &quot;docker swarm leave&quot;  # Make the worker leave the swarm</div><div class="line">docker-machine ssh myvm1 &quot;docker swarm leave -f&quot; # Make master leave, kill swarm</div><div class="line">docker-machine start myvm1            # Start a VM that is currently not running</div><div class="line">docker-machine stop $(docker-machine ls -q)               # Stop all running VMs</div><div class="line">docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images</div><div class="line">docker-machine scp docker-compose.yml myvm1:~     # Copy file to node&apos;s home dir</div><div class="line">docker-machine ssh myvm1 &quot;docker stack deploy -c &lt;file&gt; &lt;app&gt;&quot;   # Deploy an app</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker-part3:services]]></title>
      <url>/2017/10/docker-part3-services/</url>
      <content type="html"><![CDATA[<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>docker-compose.yml定义了容器的行为。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  web:</div><div class="line">    # replace username/repo:tag with your name and image details</div><div class="line">    image: username/repo:tag</div><div class="line">    deploy:</div><div class="line">      replicas: 5</div><div class="line">      resources:</div><div class="line">        limits:</div><div class="line">          cpus: &quot;0.1&quot;</div><div class="line">          memory: 50M</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">    ports:</div><div class="line">      - &quot;80:80&quot;</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">networks:</div><div class="line">  webnet:</div></pre></td></tr></table></figure>
<h2 id="运行负载均衡应用"><a href="#运行负载均衡应用" class="headerlink" title="运行负载均衡应用"></a>运行负载均衡应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">➜  docker-test docker swarm init</div><div class="line">Swarm initialized: current node (scxmr99cp0d6zjpajrckdktmk) is now a manager.</div><div class="line"></div><div class="line">To add a worker to this swarm, run the following command:</div><div class="line"></div><div class="line">    docker swarm join --token SWMTKN-1-19wb8qe3cws960d8famp2lix8t1d6wza4eg9fw7geklefqjrvh-82wzkvoszligqto4eoe2ufail 192.168.65.2:2377</div><div class="line"></div><div class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</div><div class="line"></div><div class="line">➜  docker-test docker stack deploy -c docker-compose.yml getstartedlab</div><div class="line">Creating network getstartedlab_webnet</div><div class="line">Creating service getstartedlab_web</div><div class="line"></div><div class="line">➜  docker-test docker service ls</div><div class="line">ID                  NAME                MODE                REPLICAS            IMAGE                             PORTS</div><div class="line">lrd7bsarm31c        getstartedlab_web   replicated          5/5                 842071912/start-docker1:hellopy   *:80-&gt;80/tcp</div><div class="line"></div><div class="line">➜  docker-test docker stack ls</div><div class="line">NAME                SERVICES</div><div class="line">getstartedlab       1</div><div class="line"></div><div class="line">➜  docker-test docker service ps lrd7bsarm31c</div><div class="line">ID                  NAME                  IMAGE                             NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</div><div class="line">pv0xalnz0jub        getstartedlab_web.1   842071912/start-docker1:hellopy   moby                Running             Running 2 minutes ago</div><div class="line">qrkj0dctgukn        getstartedlab_web.2   842071912/start-docker1:hellopy   moby                Running             Running 2 minutes ago</div><div class="line">xq97vphe37h5        getstartedlab_web.3   842071912/start-docker1:hellopy   moby                Running             Running 2 minutes ago</div><div class="line">kc0kj4tdzlpz        getstartedlab_web.4   842071912/start-docker1:hellopy   moby                Running             Running 2 minutes ago</div><div class="line">5roeqr1o8le3        getstartedlab_web.5   842071912/start-docker1:hellopy   moby                Running             Running 2 minutes ago</div><div class="line"></div><div class="line">➜  docker-test docker container ls -q</div><div class="line">3b010bc1ba11</div><div class="line">e9c89868d2ee</div><div class="line">34cc4a84736a</div><div class="line">b697e352c205</div><div class="line">92db487d0025</div><div class="line"></div><div class="line">➜  docker-test docker stack rm getstartedlab</div><div class="line">Removing service getstartedlab_web</div><div class="line">Removing network getstartedlab_webnet</div><div class="line"></div><div class="line">➜  docker-test docker node ls</div><div class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</div><div class="line">scxmr99cp0d6zjpajrckdktmk *   moby                Ready               Active              Leader</div><div class="line"></div><div class="line">➜  docker-test docker swarm leave --force</div><div class="line">Node left the swarm.</div><div class="line">➜  docker-test docker node ls</div><div class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</div></pre></td></tr></table></figure>
<h2 id="命令集"><a href="#命令集" class="headerlink" title="命令集"></a>命令集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker swarm init</div><div class="line">docker stack ls                                            # List stacks or apps</div><div class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  # Run the specified Compose file</div><div class="line">docker service ls                 # List running services associated with an app</div><div class="line">docker service ps &lt;service&gt;                  # List tasks associated with an app</div><div class="line">docker inspect &lt;task or container&gt;                   # Inspect task or container</div><div class="line">docker container ls -q                                      # List container IDs</div><div class="line">docker stack rm &lt;appname&gt;                             # Tear down an application</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二进制数组转十六进制]]></title>
      <url>/2017/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="二进制数组转十六进制"><a href="#二进制数组转十六进制" class="headerlink" title="二进制数组转十六进制"></a>二进制数组转十六进制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private static String byte2hex(byte [] buffer)&#123;</div><div class="line">    String h = &quot;&quot;;</div><div class="line"></div><div class="line">    for(int i = 0; i &lt; buffer.length; i++)&#123;</div><div class="line">        String temp = Integer.toHexString(buffer[i] &amp; 0xFF);</div><div class="line">        if(temp.length() == 1)&#123;</div><div class="line">            temp = &quot;0&quot; + temp;</div><div class="line">        &#125;</div><div class="line">        h = h + &quot; &quot;+ temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return h;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二进制输出二进制字符串"><a href="#二进制输出二进制字符串" class="headerlink" title="二进制输出二进制字符串"></a>二进制输出二进制字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static String byte2Str(byte [] buffer)&#123;</div><div class="line">    String h = &quot;&quot;;</div><div class="line"></div><div class="line">    for(int i = 0; i &lt; buffer.length; i++)&#123;</div><div class="line">        String temp = Integer.toBinaryString(buffer[i]);</div><div class="line">        h = h + &quot; &quot;+ temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return h;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> byte </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea免费激活方法]]></title>
      <url>/2017/10/idea%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="获取注册码"><a href="#获取注册码" class="headerlink" title="获取注册码"></a>获取注册码</h2><p><a href="http://idea.lanyus.com/" target="_blank" rel="external">http://idea.lanyus.com/</a><br><a href="http://www.98key.com/idea" target="_blank" rel="external">http://www.98key.com/idea</a></p>
<h2 id="填入license-server"><a href="#填入license-server" class="headerlink" title="填入license server"></a>填入license server</h2><p><a href="http://intellij.mandroid.cn/" target="_blank" rel="external">http://intellij.mandroid.cn/</a><br><a href="http://idea.imsxm.com/" target="_blank" rel="external">http://idea.imsxm.com/</a><br><a href="http://idea.iteblog.com/key.php" target="_blank" rel="external">http://idea.iteblog.com/key.php</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 安装使用Docker]]></title>
      <url>/2017/10/mac-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Docker/</url>
      <content type="html"><![CDATA[<h2 id="docker安装与启动"><a href="#docker安装与启动" class="headerlink" title="docker安装与启动"></a>docker安装与启动</h2><p><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="external">docker官网地址</a>,下载dmg安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ docker run hello-world</div><div class="line">Hello from Docker!</div><div class="line">This message shows that your installation appears to be working correctly.</div><div class="line"></div><div class="line">To generate this message, Docker took the following steps:</div><div class="line"> 1. The Docker client contacted the Docker daemon.</div><div class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</div><div class="line"> 3. The Docker daemon created a new container from that image which runs the</div><div class="line">    executable that produces the output you are currently reading.</div><div class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</div><div class="line">    to your terminal.</div><div class="line"></div><div class="line">$ docker --version</div></pre></td></tr></table></figure></p>
<h2 id="构建第一个app"><a href="#构建第一个app" class="headerlink" title="构建第一个app"></a>构建第一个app</h2><p><a href="https://docs.docker.com/get-started/part2/#apppy" target="_blank" rel="external">官网文档 Build app</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">Dockerfile      app.py          requirements.txt</div><div class="line"></div><div class="line">$ docker build -t friendlyhello .</div><div class="line">Sending build context to Docker daemon  4.608kB</div><div class="line">Step 1/7 : FROM python:2.7-slim</div><div class="line">2.7-slim: Pulling from library/python</div><div class="line"></div><div class="line">$ docker images</div><div class="line">REPOSITORY            TAG                 IMAGE ID</div><div class="line">friendlyhello         latest              326387cea398</div><div class="line"></div><div class="line">$ docker run -p 4000:80 friendlyhello </div><div class="line">或 docker run -d -p 4000:80 friendlyhello #-d 后台运行</div></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:4000。" target="_blank" rel="external">http://localhost:4000。</a><br>CTRL+C退出</p>
<p>后台运行退出时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker container ls #获取短CONTAINER ID</div><div class="line">$ docker stop id</div></pre></td></tr></table></figure></p>
<h2 id="分享image"><a href="#分享image" class="headerlink" title="分享image"></a>分享image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker login</div><div class="line">docker tag image username/repository:tag #Tag the image</div><div class="line">比如：docker tag friendlyhello john/get-started:part2</div><div class="line"></div><div class="line">docker images</div><div class="line"></div><div class="line">docker push username/repository:tag #Publish the image</div><div class="line"></div><div class="line">docker run -p 4000:80 username/repository:tag #Pull and run the image from the remote repository</div></pre></td></tr></table></figure>
<h2 id="容器-amp-镜像命令列表"><a href="#容器-amp-镜像命令列表" class="headerlink" title="容器&amp;镜像命令列表"></a>容器&amp;镜像命令列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">docker build -t friendlyname .  # Create image using this directory&apos;s Dockerfile</div><div class="line">docker run -p 4000:80 friendlyname  # Run &quot;friendlyname&quot; mapping port 4000 to 80</div><div class="line">docker run -d -p 4000:80 friendlyname         # Same thing, but in detached mode</div><div class="line">docker container ls                                # List all running containers</div><div class="line">docker container ls -a             # List all containers, even those not running</div><div class="line">docker container stop &lt;hash&gt;           # Gracefully stop the specified container</div><div class="line">docker container kill &lt;hash&gt;         # Force shutdown of the specified container</div><div class="line">docker container rm &lt;hash&gt;        # Remove specified container from this machine</div><div class="line">docker container rm $(docker container ls -a -q)         # Remove all containers</div><div class="line">docker image ls -a                             # List all images on this machine</div><div class="line">docker image rm &lt;image id&gt;            # Remove specified image from this machine</div><div class="line">docker image rm $(docker image ls -a -q)   # Remove all images from this machine</div><div class="line">docker login             # Log in this CLI session using your Docker credentials</div><div class="line">docker tag &lt;image&gt; username/repository:tag  # Tag &lt;image&gt; for upload to registry</div><div class="line">docker push username/repository:tag            # Upload tagged image to registry</div><div class="line">docker run username/repository:tag                   # Run image from a registry</div></pre></td></tr></table></figure>
<h2 id="镜像的获取"><a href="#镜像的获取" class="headerlink" title="镜像的获取"></a>镜像的获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 搜索镜像</div><div class="line">docker search &lt;image&gt; # 在docker index中搜索image</div><div class="line"># 下载镜像</div><div class="line">docker pull &lt;image&gt;  # 从docker registry server 中下拉image</div><div class="line"># 查看镜像 </div><div class="line">docker images： # 列出images</div><div class="line">docker images -a # 列出所有的images（包含历史）</div><div class="line">docker rmi  &lt;image ID&gt;： # 删除一个或多个image</div></pre></td></tr></table></figure>
<h2 id="容器的使用"><a href="#容器的使用" class="headerlink" title="容器的使用"></a>容器的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查看容器</div><div class="line">    docker ps ：列出当前所有正在运行的container</div><div class="line">    docker ps -l ：列出最近一次启动的container</div><div class="line">    docker ps -a ：列出所有的container（包含历史，即运行过的container）</div><div class="line">    docker ps -q ：列出最近一次运行的container ID</div><div class="line"># 再次启动容器</div><div class="line">    docker start/stop/restart &lt;container&gt; #：开启/停止/重启container</div><div class="line">    docker start [container_id] #：再次运行某个container （包括历史container）</div><div class="line">#进入正在运行的docker容器</div><div class="line">    docker exec -it [container_id] /bin/bash</div><div class="line">    docker run -i -t -p &lt;host_port:contain_port&gt; #：映射 HOST 端口到容器，方便外部访问容器内服务，host_port 可以省略，省略表示把 container_port 映射到一个动态端口。</div><div class="line"></div><div class="line"># 删除容器</div><div class="line">    docker rm &lt;container...&gt; #：删除一个或多个container</div><div class="line">    docker rm `docker ps -a -q` #：删除所有的container</div><div class="line">    docker ps -a -q | xargs docker rm #：同上, 删除所有的container</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jvm 工具]]></title>
      <url>/2017/10/jvm-%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>jmap：生成堆快照<br>jstat: 显示进程中的类装载、内存、垃圾收集、JIT编译等运行数据<br>jhat：html形式显示对象占用内存大小以及引用情况<br>jconsole（图形工具）<br>jvisualvm（图形工具）<br>MAT （第三方图形工具）</p>
<h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><blockquote>
<p>jmap -heap :当前堆内存分布信息，如From space, To Space等占用内存大小<br>jmap -histo : 当前堆中对象占用内存大小情况，柱状图数据结构组织。可以简单得定位下当前占用内存最大的几个对象<br>jmap -histo:live:先触发一次gc , 再统计对象占用内存情况。可以简单得定位下当前占用内存最大的几个对象以及对象是否可以被gc回收<br>jmap -dump:format=b,file=heapDump: 导出堆详细使用信息，b表示二进制文件，之后采用其他工具分析，如jhat,mat.非常详细，可分析到对象之间的引用关系等。</p>
</blockquote>
<h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p>显示进程中的类装载、内存、垃圾收集、JIT编译等运行数据<br>目前感觉用上的都是gc记录查看，实际还没太用过</p>
<blockquote>
<p>jstat -gc 3331 250 20: 查询进程2764的垃圾收集情况，每250毫秒查询一次，一共查询20次。<br>jstat- gcause</p>
</blockquote>
<h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p>可用来分析 jmap dump生成的堆信息二进制文件。html形式显示对象占用内存大小以及引用情况，但显示得并不友好。感觉比较鸡肋。</p>
<blockquote>
<p>jhat file</p>
</blockquote>
<h2 id="jconsole（图形工具）"><a href="#jconsole（图形工具）" class="headerlink" title="jconsole（图形工具）"></a>jconsole（图形工具）</h2><p>Jconsole（Java Monitoring and Management Console）从java5开始，在JDK中自带的java监控和管理控制台，用于对JVM中内存，线程和类等的监控</p>
<h2 id="jvisualvm（图形工具）"><a href="#jvisualvm（图形工具）" class="headerlink" title="jvisualvm（图形工具）"></a>jvisualvm（图形工具）</h2><p>用于查看 Java 虚拟机 (Java Virtual Machine, JVM) 上运行的基于 Java 技术的应用程序（Java 应用程序）的详细信息。</p>
<h2 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h2><p>MAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://www.jianshu.com/p/6bbab921102b" target="_blank" rel="external">http://www.jianshu.com/p/6bbab921102b</a><br><a href="http://www.ityouknow.com/" target="_blank" rel="external">http://www.ityouknow.com/</a> </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty 学习]]></title>
      <url>/2017/10/Netty-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[idea初始化设置]]></title>
      <url>/2017/09/idea%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="编程字体设置"><a href="#编程字体设置" class="headerlink" title="编程字体设置"></a>编程字体设置</h2><p>根据个人喜好选择喜欢的编程字体<br>editor–&gt;font–&gt;font<br>选用 Monospace 14字体，行距1.1（个人喜欢）<br>或选用 Courier new 15字体，行距1.</p>
<h2 id="去除大小写敏感"><a href="#去除大小写敏感" class="headerlink" title="去除大小写敏感"></a>去除大小写敏感</h2><p> Editor –&gt; Code Completion，设置Case sensitive completion为none。</p>
<h2 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h2><p>Editor -&gt; General -&gt; Appearance，勾选show line numbers。</p>
<h2 id="设置编辑器和控制台的字体"><a href="#设置编辑器和控制台的字体" class="headerlink" title="设置编辑器和控制台的字体"></a>设置编辑器和控制台的字体</h2><p>Appearence–&gt;override default fonts by<br>设置为<br>consolas<br>Courier</p>
<h2 id="修改文件默认签名"><a href="#修改文件默认签名" class="headerlink" title="修改文件默认签名"></a>修改文件默认签名</h2><p>Editor-&gt;File and Code Templates-&gt;Includes-&gt;File Header</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/** </div><div class="line"> * Created by $&#123;USER&#125; on $&#123;DATE&#125;. </div><div class="line"> */</div></pre></td></tr></table></figure>
<h2 id="添加自定义代码补全Live-Templates"><a href="#添加自定义代码补全Live-Templates" class="headerlink" title="添加自定义代码补全Live Templates"></a>添加自定义代码补全Live Templates</h2><p>Editor -&gt; Live Templates</p>
<h2 id="设置护眼色"><a href="#设置护眼色" class="headerlink" title="设置护眼色"></a>设置护眼色</h2><p>Editor-&gt; Color Scheme<br>background 设置为 C7EDCC</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 安装java9]]></title>
      <url>/2017/09/mac-%E5%AE%89%E8%A3%85java9/</url>
      <content type="html"><![CDATA[<h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html" target="_blank" rel="external">jdk9官网地址</a></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>mac环境修改配置文件<br>vim .bash_profile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure>
<p>使配置文件生效<br>source .bash_profile</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins 入门使用]]></title>
      <url>/2017/09/Jenkins-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>用Jenkins来做节点控制、版本管理、流程设置、触发Job，用Docker来搭建编译部署环境。</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 备份mysqldump]]></title>
      <url>/2017/09/mysql-%E5%A4%87%E4%BB%BDmysqldump/</url>
      <content type="html"><![CDATA[<h2 id="备份数据库的某表数据"><a href="#备份数据库的某表数据" class="headerlink" title="备份数据库的某表数据"></a>备份数据库的某表数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p database_name  table_name table_name2 &gt; database_dump.txt</div></pre></td></tr></table></figure>
<h2 id="备份整个数据库的数据"><a href="#备份整个数据库的数据" class="headerlink" title="备份整个数据库的数据"></a>备份整个数据库的数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p database_name &gt; database_dump.txt</div></pre></td></tr></table></figure>
<h2 id="备份所有数据库"><a href="#备份所有数据库" class="headerlink" title="备份所有数据库"></a>备份所有数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p --all-databases &gt; database_dump.txt</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 备份数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 流程控制语句if/case]]></title>
      <url>/2017/09/mysql-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5if-case/</url>
      <content type="html"><![CDATA[<h2 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h2><blockquote>
<p>IF(expr1,expr2,expr3)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select if(v=1,&apos;男&apos;,&apos;女&apos;) from t1 ;</div></pre></td></tr></table></figure>
<p>如果条件判断多可以使用case when then。</p>
<h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CASE   &lt;单值表达式&gt;</div><div class="line">        WHEN &lt;表达式值&gt; THEN &lt;SQL语句或者返回值&gt;</div><div class="line">        WHEN &lt;表达式值&gt; THEN &lt;SQL语句或者返回值&gt;</div><div class="line">        WHEN &lt;表达式值&gt; THEN &lt;SQL语句或者返回值&gt;</div><div class="line">        ELSE &lt;SQL语句或者返回值&gt;</div><div class="line"> END</div></pre></td></tr></table></figure>
<h3 id="简单Case函数写法"><a href="#简单Case函数写法" class="headerlink" title="简单Case函数写法"></a>简单Case函数写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select case v </div><div class="line">    when 1 then &apos;男&apos;</div><div class="line">    when 0 then &apos;女&apos;</div><div class="line">    end</div><div class="line"> from t1 ;</div></pre></td></tr></table></figure>
<h3 id="Case搜索函数写法"><a href="#Case搜索函数写法" class="headerlink" title="Case搜索函数写法"></a>Case搜索函数写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select case  </div><div class="line">    when v=1 then &apos;男&apos;</div><div class="line">    when v=0 then &apos;女&apos;</div><div class="line">    end</div><div class="line"> from t1 ;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/martinzhang/p/3220595.html" target="_blank" rel="external">http://www.cnblogs.com/martinzhang/p/3220595.html</a></p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oh-my-zsh使用]]></title>
      <url>/2017/09/oh-my-zsh%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>查看当前的shell</p>
<blockquote>
<p>cat /etc/shells</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># List of acceptable shells for chpass(1).</div><div class="line"># Ftpd will not allow users to connect who are not using</div><div class="line"># one of these shells.</div><div class="line"></div><div class="line">/bin/bash</div><div class="line">/bin/csh</div><div class="line">/bin/ksh</div><div class="line">/bin/sh</div><div class="line">/bin/tcsh</div></pre></td></tr></table></figure>
<h2 id="zsh-安装"><a href="#zsh-安装" class="headerlink" title="zsh 安装"></a>zsh 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CentOS 安装：sudo yum install -y zsh</div><div class="line">mac 安装：brew install zsh</div></pre></td></tr></table></figure>
<p>zsh设置成系统默认shell，以代替bash</p>
<blockquote>
<p>chsh -s /bin/zsh</p>
</blockquote>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>oh-my-zsh 是 zsh 的一个配置工具。<br>安装</p>
<blockquote>
<p>wget <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> -O - | sh</p>
</blockquote>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><blockquote>
<p>vim .zshrc</p>
</blockquote>
<p>修改 plugins=(git) 为 plugins=(git autojump)<br>使配置生效 source ~/.zshrc</p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>.zshrc 中修改ZSH_THEME=’’</p>
<h2 id="打开sublime配置"><a href="#打开sublime配置" class="headerlink" title="打开sublime配置"></a>打开sublime配置</h2><blockquote>
<p>alias st=’open -a “Sublime Text”‘</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[PlanTasks使用-sublime待办插件]]></title>
      <url>/2017/09/PlanTasks%E4%BD%BF%E7%94%A8-sublime%E5%BE%85%E5%8A%9E%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="PlanTasks"><a href="#PlanTasks" class="headerlink" title="PlanTasks"></a>PlanTasks</h2><p>PlanTasks插件可以在我们的sublime编辑器里记录待办事，很方便，页面也很简单美观。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h2 id="创建todo文件"><a href="#创建todo文件" class="headerlink" title="创建todo文件"></a>创建todo文件</h2><p>以下类型文件会被识别为todo文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TODO</div><div class="line">*.todo</div><div class="line">*.todolist</div><div class="line">*.taskpaper</div><div class="line">*.tasks</div></pre></td></tr></table></figure>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol>
<li>创建project：输入一行文字在后方加上英文冒号就可以被识别为project，project是可以被折叠的，比如在任何地方输入<code>Projects:</code></li>
<li>创建task：⌘+enter或者⌘+i</li>
<li>完成task：⌘+d，两次⌘+d取消</li>
<li>打标签：在行尾添加@ ，<em>前边有空格</em></li>
<li>上下行互换位置：⌘+control+up/down</li>
<li>归档:归档文件所有完成的任务⌘+shift+A,已完成的任务移动至文档结尾;</li>
<li>分割线：— ✄ ——，输入–，按tab键</li>
<li>设置优先级：行尾加@critical、@high、@low、@today</li>
<li>时间标记：<ul>
<li>输入s,两次tab键 @started(13-10-25 15:20)</li>
<li>状态切换输入tg,两次tab键 @toggle(13-10-25 15:20)</li>
<li>创建输入cr,两次tab键 @created(13-10-25 15:20)</li>
<li>预期输入d,两次tab键 @due()</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sublime </tag>
            
            <tag> todo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSH 连接中断Write failed: Broken pipe]]></title>
      <url>/2017/09/SSH-%E8%BF%9E%E6%8E%A5%E4%B8%AD%E6%96%ADWrite-failed-Broken-pipe/</url>
      <content type="html"><![CDATA[<p>ssh连接服务器后,一段时间不操作，再次操作时会出现Write failed: Broken pipe。<br>解决方法：<br>1、客户端设置：~/.ssh/ 文件夹中添加 config 文件，并添加下面的配置：ServerAliveInterval 60<br>2、在服务器的 /etc/ssh/sshd_config 中添加如下的配置：ClientAliveInterval 60<br>3、在登录命令添加参数：ssh -o ServerAliveInterval=60 user@sshserver</p>
<p>参考：<br><a href="http://blog.csdn.net/bbirdsky/article/details/21703555" target="_blank" rel="external">http://blog.csdn.net/bbirdsky/article/details/21703555</a></p>
]]></content>
      
        <categories>
            
            <category> 问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim使用]]></title>
      <url>/2017/09/vim%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="vim编辑粘贴代码格式化"><a href="#vim编辑粘贴代码格式化" class="headerlink" title="vim编辑粘贴代码格式化"></a>vim编辑粘贴代码格式化</h2><p>vim粘贴代码会有代码代码错乱的问题</p>
<blockquote>
<p>在粘贴前先设置进入粘贴插入模式，即不会自动缩进和连续注释<br>set paste<br>然后再进入插入模式粘贴<br>在粘贴插入模式下代码是不会自动按格式缩进的，需要使用nopaste设置回来<br>set nopaste<br>也可以在.vimrc中设置切换的快捷键，比如设置F9，则可以在.vimrc中加入：<br>set pastetoggle=<f9><br>这样直接在插入模式按F9就会在“– 插入 –”模式和“– 插入（粘贴） –”模式中切换</f9></p>
</blockquote>
<h2 id="vim-分屏"><a href="#vim-分屏" class="headerlink" title="vim 分屏"></a>vim 分屏</h2>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tmux使用]]></title>
      <url>/2017/09/tmux%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>tmux是linux中一种管理窗口的程序。tmux提供了一个窗体组随时存储和恢复的功能。</p>
<h2 id="tmux的基本概念"><a href="#tmux的基本概念" class="headerlink" title="tmux的基本概念"></a>tmux的基本概念</h2><p>tmux是一个终端复用器(terminal multiplexer).<br>tmux有三个概念：会话(Session)，窗口(Window)，面板(Pane)。<br>当你输入tmux后, tmux实际做的事是首先创建一个会话(Session), 然后在这个会话中创建一个窗口, 你可以继续创建多个窗口(Window), 每个窗口初始只包含一个面板, 继续分屏后, 会出现多个面板(Pane) 你在其中看到的终端实际上都属于tmux的某个面板。</p>
<h2 id="tmux安装"><a href="#tmux安装" class="headerlink" title="tmux安装"></a>tmux安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@VM_1_49_centos ~]# yum install tmux</div></pre></td></tr></table></figure>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul>
<li>tmux new[-session] -s name -d   新建会话(-d 是否在后台)</li>
<li>tmux new -s name -n windowname  新建会话及窗口</li>
<li>tmux at[tach] -t session    重新连接(-t 后接会话名称)</li>
<li>tmux ls 显示保存的会话</li>
<li>tmux kill-session -t session    删除会话</li>
</ul>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>所有快捷键执行方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">control+b 告诉Tmux我要用Tmux的快捷键。</div></pre></td></tr></table></figure></p>
<ul>
<li>C-b ? 列出所有快捷键, 按q或Esc返回</li>
<li>C-b d detach当前会话,可暂时返回Shell界面，输入tmux attach能够重新进入之前会话</li>
<li>C-b s 选择并切换会话；在同时开启了多个会话时使用</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="sesson"><a href="#sesson" class="headerlink" title="sesson"></a>sesson</h3><ul>
<li>tmux new -s session_name<br>  creates a new tmux session named session_name</li>
<li>tmux attach -t session_name<br>  attaches to an existing tmux session named session_name</li>
<li>tmux switch -t session_name<br>  switches to an existing session named session_name</li>
<li>tmux list-sessions<br>  lists existing tmux sessions</li>
<li>tmux detach (prefix + d)<br>  detach the currently attached session</li>
<li>C-b $ 改变会话的名字</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 创建一个新的session</div><div class="line">$ tmux new -s &lt;name-of-my-session&gt;</div><div class="line"># 在当前session中创建一个新的Session, 并保证之前session依然存在</div><div class="line"># C-b : 然后输入下面命令</div><div class="line">new -s &lt;name-of-my-new-session&gt;</div><div class="line"># 进入名为test的session</div><div class="line">$ tmux attach -t test</div></pre></td></tr></table></figure>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><ul>
<li>C-b c 创建一个新窗口</li>
<li>C-b &amp; 关闭当前窗口</li>
<li>C-b w 列出所有的窗口选择</li>
<li>C-b p 切换到上一个窗口</li>
<li>C-b n 切换到下一个窗口</li>
<li>C-b 窗口号 使用窗口号切换窗口(例如窗口号为1的, 则C-b 1)</li>
<li>C-b , 重命名当前窗口，便于识别各个窗口</li>
</ul>
<h3 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h3><ul>
<li>C-b % 横向分Terminal</li>
<li>C-b “ 纵向分Terminal</li>
<li>C-b 方向键 则会在自由选择各面板</li>
<li>C-b x 关闭当前pane</li>
<li>C-b q 显示面板编号</li>
<li>C-b o 选择当前窗口中下一个面板</li>
<li>C-b 数字 选择指定窗口</li>
<li>C-b z  暂时把一个窗体放到最大</li>
</ul>
<h2 id="开启批量执行"><a href="#开启批量执行" class="headerlink" title="开启批量执行"></a>开启批量执行</h2><p>C-b后输入:set synchronize-panes ，输入:set sync [TAB]键可自动补齐</p>
<h2 id="设置鼠标"><a href="#设置鼠标" class="headerlink" title="设置鼠标"></a>设置鼠标</h2><p>C-b : 进入命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setw mode-mouse on #单个窗口启用鼠标滚轮来卷动窗口内容</div><div class="line"></div><div class="line">setw -g mode-mouse on #所有窗口启用鼠标滚轮来卷动窗口内容</div></pre></td></tr></table></figure>
<p>或者在配置文件里设置~/.tmux.conf：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setw -g mouse-resize-pane on #开启用鼠标拖动调节pane的大小</div><div class="line">setw -g mouse-select-pane on #开启用鼠标点击pane来激活该pane</div><div class="line">setw -g mouse-select-window on #开启用鼠标点击来切换活动window 状态栏的窗口名称</div><div class="line">setw -g mode-mouse on #开启所有窗口启用鼠标滚轮来卷动窗口内容</div></pre></td></tr></table></figure></p>
<p>配置之后进入命令行，输入 tmux source  ~/.tmux.conf，使配置生效。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://cenalulu.github.io/linux/tmux/" target="_blank" rel="external">http://cenalulu.github.io/linux/tmux/</a><br><a href="http://guoqiao.me/post/2016/tmux" target="_blank" rel="external">http://guoqiao.me/post/2016/tmux</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次npm i 运行错误]]></title>
      <url>/2017/09/%E8%AE%B0%E4%B8%80%E6%AC%A1npm-i-%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>执行npm i出错:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm ERR! code EINTEGRITY</div><div class="line">npm ERR! sha1-eCA6TRwyiuHYbcpkYONptX9AVa4= integrity checksum failed when using sha1: wanted sha1-eCA6TRwyiuHYbcpkYONptX9AVa4= but got sha1-tURkGu3SzDOsTOBkGT5fXZCH7as=. (26893 bytes)</div><div class="line"></div><div class="line">npm ERR! A complete log of this run can be found in:</div></pre></td></tr></table></figure>
<p>解决方法：npm cache clean –force  强制清除npm 的 cache<br>或者重新执行 npm i</p>
]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 安装node&npm]]></title>
      <url>/2017/09/linux-%E5%AE%89%E8%A3%85node-npm/</url>
      <content type="html"><![CDATA[<h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">node官网</a></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo yum install gcc-c++ make</div><div class="line"></div><div class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class="line"></div><div class="line">sudo yum -y install nodejs</div></pre></td></tr></table></figure>
<p>说明：sudo bash 作为超级用户运行”bash”</p>
<h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line"></div><div class="line">npm -v</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开始自己的个人博客]]></title>
      <url>/2016/12/%E5%BC%80%E5%A7%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<pre><code>使用hexo开始自己的博客。开篇先记录下hexo的使用。
</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装特别简单，安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">官网</a>的步骤来很快搞定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line">cd blog</div><div class="line">npm install</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p><code>$ hexo init [folder]</code><br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p><code>$ hexo new [layout] &lt;title&gt;</code><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p><code>$ hexo generate</code><br>生成静态文件。</p>
<p>选项  描述<br>-d, –deploy    文件生成后立即部署网站<br>-w, –watch 监视文件变动</p>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p><code>$ hexo publish [layout] &lt;filename&gt;</code><br>发表草稿。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>$ hexo server</code><br>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="external">http://localhost:4000/。</a></p>
<p>选项  描述<br>-p, –port  重设端口<br>-s, –static    只使用静态文件<br>-l, –log   启动日记记录，使用覆盖记录格式</p>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p><code>$ hexo deploy</code><br>部署网站。</p>
<p>参数  描述<br>-g, –generate  部署之前预先生成静态文件</p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>$ hexo render &lt;file1&gt; [file2] ...</code><br>渲染文件。</p>
<p>参数  描述<br>-o, –output    设置输出路径</p>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><p><code>$ hexo migrate &lt;type&gt;</code><br>从其他博客系统 迁移内容。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><code>$ hexo clean</code><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>$ hexo list &lt;type&gt;</code><br>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p><code>$ hexo version</code><br>显示 Hexo 版本。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><p><code>$ hexo --safe</code><br>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><p><code>$ hexo --debug</code><br>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><p><code>$ hexo --silent</code><br>隐藏终端信息。</p>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><p><code>$ hexo --config custom.yml</code><br>自定义配置文件的路径，执行后将不再使用 _config.yml。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><p><code>$ hexo --draft</code><br>显示 source/_drafts 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><p><code>$ hexo --cwd /path/to/cwd</code><br>自定义当前工作目录（Current working directory）的路径。</p>
<h2 id="添加文章评论disq"><a href="#添加文章评论disq" class="headerlink" title="添加文章评论disq"></a>添加文章评论disq</h2><p>注册账号 <a href="https://disqus.com/，在theme的_config.yml中设置" target="_blank" rel="external">https://disqus.com/，在theme的_config.yml中设置</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Disqus</div><div class="line">disqus:</div><div class="line">  enable: true</div><div class="line">  shortname: http-codr-top</div><div class="line">  count: true</div></pre></td></tr></table></figure></p>
<h2 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h2><p>在theme的_config.yml中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avatar: /images/avatar.jpg</div></pre></td></tr></table></figure></p>
<h2 id="添加logo"><a href="#添加logo" class="headerlink" title="添加logo"></a>添加logo</h2><p>Favicon在线制作工具 <a href="http://tool.lu/favicon/，在theme的_config.yml中设置" target="_blank" rel="external">http://tool.lu/favicon/，在theme的_config.yml中设置</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: images/favicon.ico</div></pre></td></tr></table></figure>
<h2 id="炫酷动态背景"><a href="#炫酷动态背景" class="headerlink" title="炫酷动态背景"></a>炫酷动态背景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Canvas-nest</div><div class="line">canvas_nest: true</div></pre></td></tr></table></figure>
<h2 id="实现统计功能"><a href="#实现统计功能" class="headerlink" title="实现统计功能"></a>实现统计功能</h2><p>安装wordcount插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install hexo-wordcount --save</div></pre></td></tr></table></figure></p>
<p>在theme的_config.yml中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">post_wordcount:</div><div class="line">    item_text: true</div><div class="line">    wordcount: true</div><div class="line">    min2read: true</div><div class="line">    separated_meta: true</div></pre></td></tr></table></figure></p>
<h2 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h2><p>next集成了leancloud，在leancloud官网注册，设置leancloud_visitors<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div></pre></td></tr></table></figure></p>
<h2 id="编写和发布草稿"><a href="#编写和发布草稿" class="headerlink" title="编写和发布草稿"></a>编写和发布草稿</h2><p>创建文章时：hexo new draft Test<br>查看草稿的效果：hexo s –draft，或者在 _config.yml文件中进行配置render_drafts: true<br>将草稿发布到_posts目录中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;title&gt;</div><div class="line">比如：hexo publish [post] Test</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
