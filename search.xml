<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git使用记录]]></title>
    <url>%2F2017%2F11%2Fgit%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[流程12工作区 ---&gt; 暂存区 ----&gt; （历史）本地分支 ---&gt; 远程分支 add commit push 工作区和暂存区1234工作区：在电脑里能看到的目录版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。版本库里最重要的就是称为stage（或者叫index）的暂存区，(add操作)，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD，（commit操作）。 分支创建与切换123456git checkout -b dev #git checkout命令加上-b参数表示创建并切换相当于git branch dev #创建分支git checkout dev #切换分支git branch #查看分支 删除分支1git branch -d dev 合并分支fast-forward 快速合并不产生合并节点，看不出来曾经做过合并no-ff 合并生成合并节点 123git merge dev #git merge命令用于合并指定分支到当前分支git merge --no-ff -m &quot;merge with no-ff&quot; dev #合并生成合并节点 查看日志12git log #查看日志git log --graph --pretty=oneline --abbrev-commit #图形查看日志 版本回退和恢复12345678910111213回退工作区修改文件git checkout -- &lt;file&gt; 回退暂存区修改文件（add操作）git reset HEAD &lt;file&gt;git checkout -- &lt;file&gt; 回退本地分支修改文件 （add commit操作）git reset --hard HEAD^ #git reset HEAD~2恢复git reflog git reflog git reset --hard 0a1f420 暂时储藏修改当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场123git stash #储藏代码git stash list #查看列表git stash pop #回到工作现场 Reset、Checkout、Revert 的选择123456789reset 将一个分支的末端指向另一个提交。--soft – 缓存区和工作目录都不会被改变--mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响--hard – 缓存区和工作目录都同步到你指定的提交checkout 除了分支之外，你还可以传入提交的引用来 checkout 到任意的提交。git checkout HEAD~2Revert 撤销一个提交的同时会创建一个新的提交,相比 git reset，它不会改变现在的提交历史。因此，git revert 可以用在公共分支上，git reset 应该用在私有分支上。你也可以把 git revert 当作撤销已经提交的更改，而 git reset HEAD 用来撤销没有提交的更改。 参考https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000https://github.com/geeeeeeeeek/git-recipes/wiki/5.2-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%EF%BC%9AReset%E3%80%81Checkout%E3%80%81Revert-%E7%9A%84%E9%80%89%E6%8B%A9https://github.com/geeeeeeeeek/git-recipes/wiki]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 命令：统计命令]]></title>
    <url>%2F2017%2F10%2FLinux%E5%91%BD%E4%BB%A4%EF%BC%9A%E7%BB%9F%E8%AE%A1%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[一些实用的Linux文本操作命令，包括wc(统计)、cut(切分)、sort(排序)、uniq(去重)、grep(查找)、sed(替换、插入、删除)、awk(文本分析)。 wc(统计)12345# wc [-lwm]选项与参数：-l ：仅列出行；-w ：仅列出多少字(英文单字)；-m ：多少字符； cut(切分)1234567891011cut [-bn] [file] 或 cut [-c] [file] 或 cut [-df] [file] 使用说明 cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。 如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。 主要参数 -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。 -c ：以字符为单位进行分割。 -d ：自定义分隔符，默认为制表符。 -f ：与-d一起使用，指定显示哪个区域。 -n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的&lt;br /&gt;范围之内，该字符将被写出；否则，该字符将被排除。 sort(排序)123456789101112131415 sort命令是帮我们依据不同的数据类型进行排序，其语法及常用参数格式：sort [-bcfMnrtk][源文件][-o 输出文件] 补充说明：sort可针对文本文件的内容，以行为单位来排序。 参数： -b 忽略每行前面开始出的空格字符。 -c 检查文件是否已经按照顺序排序。 -f 排序时，忽略大小写字母。 -M 将前面3个字母依照月份的缩写进行排序。 -n 依照数值的大小排序。 -o&lt;输出文件&gt; 将排序后的结果存入指定的文件。 -r 以相反的顺序来排序。 -t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。 -k 选择以哪个区间进行排序。 uniq(去重)uniq命令可以去除排序过的文件中的重复行，因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。12345# uniq [-icu]选项与参数：-i ：忽略大小写字符的不同；-c ：进行计数-u ：只显示唯一的行 grep(查找)1234567891011121314151617181920212223Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。grep [options] 主要参数 [options]主要参数： －c：只输出匹配行的计数。 －I：不区分大 小写(只适用于单字符)。 －h：查询多文件时不显示文件名。 －l：查询多文件时只输出包含匹配字符的文件名。 －n：显示匹配行及 行号。 －s：不显示不存在或无匹配文本的错误信息。 －v：显示不包含匹配文本的所有行。 -E：使用正则 pattern正则表达式主要参数： \： 忽略正则表达式中特殊字符的原有含义。 ^：匹配正则表达式的开始行。 $: 匹配正则表达式的结束行。 \&lt;：从匹配正则表达 式的行开始。 \&gt;：到匹配正则表达式的行结束。 [ ]：单个字符，如[A]即A符合要求 。 [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。 。：所有的单个字符。 * ：有字符，长度可以为0。 sed(替换、插入、删除)sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作，下面先了解一下sed的用法。sed命令行格式为：123456789101112131415sed [-nefri] ‘command’ 输入文本 常用选项： -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。 -e∶直接在指令列模式上进行 sed 的动作编辑； -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作； -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法) -i∶直接修改读取的档案内容，而不是由萤幕输出。 常用命令： a ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～ s ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ awk(文本分析)awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理1awk &apos;&#123;pattern + action&#125;&apos; &#123;filenames&#125; 尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。 awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。 通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。 参考博客出处：http://www.cnblogs.com/maybe2030/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iterm2使用技巧]]></title>
    <url>%2F2017%2F10%2Fiterm2%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[使用快捷键12345678910⌘ + 数字: 切换标签页。 ⌘ + 方向键 按方向切换标签页。⌘ + enter: 切换全屏⌘ + f: 查找。支持正则。其中查找的内容会被自动复制。鼠标去选中的内容也会自动复制⌘ + d: 垂直分屏，⌘ + shift + d: 水平分屏。使用⌘ + ]和⌘ + [在最近使用的分屏直接切换.⌘ + t :新的标签页⌘ + w :关闭当前标签页⌘ + ；:自动补全历史命令⌘ + —/+/0: 调整字体大小⌘ + /: 找到当前光标位置 命令行123456789101112ctrl + u: 清空当前行。ctrl + a: 到行首ctrl + e: 行末ctrl + f/b: 前进后退，相当于左右方向键ctrl + p: 上一条命令，相当于方向键上ctrl + r: 搜索命令历史ctrl + d: 删除当前字符ctrl + h: 删除之前的字符ctrl + w: 删除光标前的单词ctrl + k: 删除到文本末尾ctrl + t: 交换光标处文本⌘ + r:清屏，其实是滚到新的一屏，并没有清空。ctrl + l 也可以做到。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>iterm2</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx添加日志分割logrotate]]></title>
    <url>%2F2017%2F10%2Fnginx%E6%B7%BB%E5%8A%A0%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%2F</url>
    <content type="text"><![CDATA[logrotate简介logrotate 是Linux系统日志文件管理工具。用来把旧的日志文件删除，并创建新的日志文件，我们把它叫做“转储”。可以根据日志文件的大小，也可以根据其天数来转储，这个过程一般通过 cron 程序来执行。logrotate 程序还可以用于压缩日志文件，以及发送日志到指定的E-mail。默认的logrotate被加入cron的/etc/cron.daily中作为每日任务执行。/etc/logrotate.d/* 为/etc/logrotate.conf默认包含目录其中文件也会被logrotate读取。指明每个日志文件的特定规则。/var/lib/logrotate/status中默认记录logrotate上次轮换日志文件的时间。 logrotate安装centos是默认有安装yum install logrotate安装完成之后在，在/etc/logrotate.d/有以下脚本12345678$ ll /etc/logrotate.d/total 24drwxr-xr-x. 2 root root 4096 Mar 3 2016 2016-03-03-rw-r--r--. 1 root root 103 Jul 14 2015 dracut-rw-r--r-- 1 root root 217 Oct 31 2016 nginx-rw-r--r--. 1 root root 329 Jul 17 2012 psacct-rw-r--r--. 1 root root 265 Mar 3 2016 syslog-rw-r--r--. 1 root root 100 Feb 22 2013 yum 运行机制crontab会每天定时执行/etc/cron.daily目录下的脚本，在这个目录有个logrotate脚本，脚本内容为12345678#!/bin/sh/usr/sbin/logrotate /etc/logrotate.conf &gt;/dev/null 2&gt;&amp;1EXITVALUE=$?if [ $EXITVALUE != 0 ]; then /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;fiexit 0 每天执行一次/usr/sbin/logrotate /etc/logrotate.conf，logrotate.conf中include /etc/logrotate.d nginx脚本1234567891011/var/log/nginx/*log &#123; daily rotate 10 missingok notifempty compress sharedscripts postrotate /bin/kill -USR1 $(cat /var/run/nginx.pid 2&gt;/dev/null) 2&gt;/dev/null || : endscript&#125; 1234567891011121314151617181920212223compress 通过gzip压缩转储以后的日志nocompress 不压缩copytruncate 用于还在打开中的日志文件，把当前日志备份并截断nocopytruncate 备份日志文件但是不截断create mode owner group 转储文件，使用指定的文件模式创建新的日志文件nocreate 不建立新的日志文件delaycompress 和 compress 一起使用时，转储的日志文件到下一次转储时才压缩nodelaycompress 覆盖 delaycompress 选项，转储同时压缩。errors address 专储时的错误信息发送到指定的Email 地址ifempty 即使是空文件也转储，这个是 logrotate 的缺省选项。notifempty 如果是空文件的话，不转储mail address 把转储的日志文件发送到指定的E-mail 地址nomail 转储时不发送日志文件olddir directory 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统noolddir 转储后的日志文件和当前日志文件放在同一个目录下prerotate/endscript 在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行postrotate/endscript 在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行daily 指定转储周期为每天weekly 指定转储周期为每周monthly 指定转储周期为每月rotate count 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份tabootext [+] list 让logrotate 不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~ size size 当日志文件到达指定的大小时才转储，bytes(缺省)及KB(sizek)或MB(sizem) 命令立刻执行分割：/usr/sbin/logrotate -vf /etc/logrotate.d/nginx查看执行状态 cat /var/lib/logrotate.status 添加定时任务1234crontab -e #添加以下代码， #每天凌晨定时执行脚本# crond-id-02:nginx_logs logroate0 0 * * * /usr/sbin/logrotate -vf /etc/logrotate.d/nginx &gt;/dev/null 2&gt;&amp;1]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 命令：压缩命令]]></title>
    <url>%2F2017%2F10%2FLinux-%E5%91%BD%E4%BB%A4%EF%BC%9A%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[tar命令 解包：tar zxvf FileName.tar 解包到指定文件夹：tar zxvf FileName.tar -C dirname 打包：tar czvf FileName.tar DirName gz命令 解压：gunzip FileName.gz 解压：gzip -d FileName.gz 压缩：gzip FileName tar.gz 解压：tar zxvf FileName.tar.gz 压缩：tar zcvf FileName.tar.gz DirName 压缩多个文件：tar zcvf FileName.tar.gz DirName1 DirName2 DirName3 zip命令 解压：unzip FileName.zip 解压到指定目录：unzip -d /home/sunny myfile.zip 压缩：zip -r FileName.zip DirName]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 命令: 运行远程命令]]></title>
    <url>%2F2017%2F10%2FLinux-%E5%91%BD%E4%BB%A4-%E8%BF%90%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[运行远程命令123➜ ~ ssh root@dev &quot;ls /mydata&quot;appsdevelop]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 命令：查看文件夹下文件大小]]></title>
    <url>%2F2017%2F10%2FLinux-%E5%91%BD%E4%BB%A4%EF%BC%9A%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[查看文件夹下文件大小du [-abcDhHklmsSx] [-L &lt;符号连接&gt;][-X &lt;文件&gt;][–block-size][–exclude=&lt;目录或文件&gt;] [–max-depth=&lt;目录层数&gt;][–help][–version][目录或文件] 1du -h --max-depth=1 /mydata/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-part5:Stacks]]></title>
    <url>%2F2017%2F10%2Fdocker-part5-Stacks%2F</url>
    <content type="text"><![CDATA[新增一个服务（service）visualizer修改docker-compose.yml123456789101112131415161718192021222324252627282930version: &quot;3&quot;services: web: # replace username/repo:tag with your name and image details image: username/repo:tag deploy: replicas: 5 restart_policy: condition: on-failure resources: limits: cpus: &quot;0.1&quot; memory: 50M ports: - &quot;80:80&quot; networks: - webnet visualizer: image: dockersamples/visualizer:stable ports: - &quot;8080:8080&quot; volumes: - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; deploy: placement: constraints: [node.role == manager] networks: - webnetnetworks: webnet: 更新服务123456789➜ docker-test docker stack deploy -c docker-compose.yml getstartedlabCreating network getstartedlab_webnetCreating service getstartedlab_webCreating service getstartedlab_visualizer➜ docker-test docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORSmyvm1 * virtualbox Running tcp://192.168.99.100:2376 v17.09.0-cemyvm2 - virtualbox Running tcp://192.168.99.101:2376 v17.09.0-ce 访问 http://192.168.99.100:8080/ 持久化redis数据服务修改docker-compose.yml123456789101112131415161718192021222324252627282930313233343536373839404142version: &quot;3&quot;services: web: # replace username/repo:tag with your name and image details image: 842071912/start-docker1:hellopy deploy: replicas: 5 resources: limits: cpus: &quot;0.1&quot; memory: 50M restart_policy: condition: on-failure ports: - &quot;80:80&quot; networks: - webnet visualizer: image: dockersamples/visualizer:stable ports: - &quot;8080:8080&quot; volumes: - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; deploy: placement: constraints: [node.role == manager] networks: - webnet redis: image: redis ports: - &quot;6379:6379&quot; volumes: - /home/docker/data:/data deploy: placement: constraints: [node.role == manager] command: redis-server --appendonly yes networks: - webnetnetworks: webnet: 创建./data文件夹123456789101112➜ docker-test docker-machine ssh myvm1 &quot;mkdir ./data&quot;➜ docker-test docker stack deploy -c docker-compose.yml getstartedlabUpdating service getstartedlab_web (id: p3yof4klife0ulvn7fqwjrhkm)Updating service getstartedlab_visualizer (id: s550x4sifn20ab391fsywu0l2)Updating service getstartedlab_redis (id: a2eh1a3c3di608fsa00l7uvj8)➜ docker-test docker service lsID NAME MODE REPLICAS IMAGE PORTSa2eh1a3c3di6 getstartedlab_redis replicated 1/1 redis:latest *:6379-&gt;6379/tcps550x4sifn20 getstartedlab_visualizer replicated 1/1 dockersamples/visualizer:stable *:8080-&gt;8080/tcpp3yof4klife0 getstartedlab_web replicated 5/5 842071912/start-docker1:hellopy *:80-&gt;80/tcp 访问 http://192.168.99.100:8080/]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-part4:swarms]]></title>
    <url>%2F2017%2F10%2Fdocker-part4-swarms%2F</url>
    <content type="text"><![CDATA[设置swarmmac系统下需要安装 install Oracle VirtualBox 创建集群使用docker-machine创建VMs,创建有可能会失败多执行几次123456789101112131415161718192021222324252627282930313233➜ docker-test docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS➜ docker-test docker-machine create --driver virtualbox myvm1Running pre-create checks...(myvm1) No default Boot2Docker ISO found locally, downloading the latest release...(myvm1) Latest release for github.com/boot2docker/boot2docker is v17.09.0-ce(myvm1) Downloading /Users/hanqingsong/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v17.09.0-ce/boot2docker.iso...(myvm1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%Creating machine...(myvm1) Copying /Users/hanqingsong/.docker/machine/cache/boot2docker.iso to /Users/hanqingsong/.docker/machine/machines/myvm1/boot2docker.iso...(myvm1) Creating VirtualBox VM...(myvm1) Creating SSH key...(myvm1) Starting the VM...(myvm1) Check network to re-create if needed...(myvm1) Found a new host-only adapter: &quot;vboxnet0&quot;(myvm1) Waiting for an IP...Waiting for machine to be running, this may take a few minutes...Detecting operating system of created instance...Waiting for SSH to be available...Detecting the provisioner...Provisioning with boot2docker...Copying certs to the local machine directory...Copying certs to the remote machine...Setting Docker configuration on the remote daemon...Checking connection to Docker...Docker is up and running!To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env myvm1➜ docker-test docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORSmyvm1 - virtualbox Running tcp://192.168.99.100:2376 v17.09.0-cemyvm2 - virtualbox Running tcp://192.168.99.101:2376 v17.09.0-ce 初始化swarm添加节点设置myvm1为swarm管理者12345678➜ docker-test docker-machine ssh myvm1 &quot;docker swarm init --advertise-addr 192.168.99.100&quot; Swarm initialized: current node (mwshg3zvljp17muqpuua5l3d1) is now a manager.To add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-26jjkt2i3rul2qp7hwdp2m3ek1vegmumr6mk07ba8orc886ix2-c41i1zkhtnjqartdv6l75ms8h 192.168.99.100:2377To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions. myvm2添加为worker12➜ docker-test docker-machine ssh myvm2 &quot;docker swarm join --token SWMTKN-1-26jjkt2i3rul2qp7hwdp2m3ek1vegmumr6mk07ba8orc886ix2-c41i1zkhtnjqartdv6l75ms8h 192.168.99.100:2377&quot;This node joined a swarm as a worker. 查看swarm节点1234➜ docker-test docker-machine ssh myvm1 &quot;docker node ls&quot;ID HOSTNAME STATUS AVAILABILITY MANAGER STATUSmwshg3zvljp17muqpuua5l3d1 * myvm1 Ready Active Leaderurdtegb3yanqi0d98vzm49tof myvm2 Ready Active 在swarm集群部署应用设置myvm1为激活状态1234567891011121314➜ docker-test docker-machine env myvm1export DOCKER_TLS_VERIFY=&quot;1&quot;export DOCKER_HOST=&quot;tcp://192.168.99.100:2376&quot;export DOCKER_CERT_PATH=&quot;/Users/hanqingsong/.docker/machine/machines/myvm1&quot;export DOCKER_MACHINE_NAME=&quot;myvm1&quot;# Run this command to configure your shell:# eval $(docker-machine env myvm1)➜ docker-test eval $(docker-machine env myvm1)➜ docker-test docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORSmyvm1 * virtualbox Running tcp://192.168.99.100:2376 v17.09.0-cemyvm2 - virtualbox Running tcp://192.168.99.101:2376 v17.09.0-ce 在swarm manager部署应用123➜ docker-test docker stack deploy -c docker-compose.yml getstartedlabCreating network getstartedlab_webnetCreating service getstartedlab_web 查看服务部署信息1234567➜ docker-test docker stack ps getstartedlabID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTSqvs0h0pqgsou getstartedlab_web.1 842071912/start-docker1:hellopy myvm1 Running Preparing about a minute agojtlfqsejqnmo getstartedlab_web.2 842071912/start-docker1:hellopy myvm2 Running Running 24 seconds agowauh0t4cybvn getstartedlab_web.3 842071912/start-docker1:hellopy myvm1 Running Preparing about a minute agofeyi52iwjpa2 getstartedlab_web.4 842071912/start-docker1:hellopy myvm2 Running Running 24 seconds agom7mz2kevh15r getstartedlab_web.5 842071912/start-docker1:hellopy myvm2 Running Running 24 seconds ago 清除和重启 tear down the stack 123 ➜ docker-test docker stack rm getstartedlabRemoving service getstartedlab_webRemoving network getstartedlab_webnet Keep the swarm or remove it?At some point later, you can remove this swarm if you want to with docker-machine ssh myvm2 “docker swarm leave” on the worker and docker-machine ssh myvm1 “docker swarm leave –force” on the manager, but you’ll need this swarm for part 5, so please keep it around for now. 123456789101112➜ docker-test eval $(docker-machine env -u)➜ docker-test docker-machine stop $(docker-machine ls -q)Stopping &quot;myvm2&quot;...Stopping &quot;myvm1&quot;...Machine &quot;myvm2&quot; was stopped.Machine &quot;myvm1&quot; was stopped.➜ docker-test docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORSmyvm1 - virtualbox Stopped Unknownmyvm2 - virtualbox Stopped Unknown 命令1234567891011121314docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)docker-machine create -d hyperv --hyperv-virtual-switch &quot;myswitch&quot; myvm1 # Win10docker-machine env myvm1 # View basic information about your nodedocker-machine ssh myvm1 &quot;docker node ls&quot; # List the nodes in your swarmdocker-machine ssh myvm1 &quot;docker node inspect &lt;node ID&gt;&quot; # Inspect a nodedocker-machine ssh myvm1 &quot;docker swarm join-token -q worker&quot; # View join tokendocker-machine ssh myvm1 # Open an SSH session with the VM; type &quot;exit&quot; to enddocker-machine ssh myvm2 &quot;docker swarm leave&quot; # Make the worker leave the swarmdocker-machine ssh myvm1 &quot;docker swarm leave -f&quot; # Make master leave, kill swarmdocker-machine start myvm1 # Start a VM that is currently not runningdocker-machine stop $(docker-machine ls -q) # Stop all running VMsdocker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk imagesdocker-machine scp docker-compose.yml myvm1:~ # Copy file to node&apos;s home dirdocker-machine ssh myvm1 &quot;docker stack deploy -c &lt;file&gt; &lt;app&gt;&quot; # Deploy an app]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-part3:services]]></title>
    <url>%2F2017%2F10%2Fdocker-part3-services%2F</url>
    <content type="text"><![CDATA[docker-compose.ymldocker-compose.yml定义了容器的行为。 12345678910111213141516171819version: &quot;3&quot;services: web: # replace username/repo:tag with your name and image details image: username/repo:tag deploy: replicas: 5 resources: limits: cpus: &quot;0.1&quot; memory: 50M restart_policy: condition: on-failure ports: - &quot;80:80&quot; networks: - webnetnetworks: webnet: 运行负载均衡应用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748➜ docker-test docker swarm initSwarm initialized: current node (scxmr99cp0d6zjpajrckdktmk) is now a manager.To add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-19wb8qe3cws960d8famp2lix8t1d6wza4eg9fw7geklefqjrvh-82wzkvoszligqto4eoe2ufail 192.168.65.2:2377To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.➜ docker-test docker stack deploy -c docker-compose.yml getstartedlabCreating network getstartedlab_webnetCreating service getstartedlab_web➜ docker-test docker service lsID NAME MODE REPLICAS IMAGE PORTSlrd7bsarm31c getstartedlab_web replicated 5/5 842071912/start-docker1:hellopy *:80-&gt;80/tcp➜ docker-test docker stack lsNAME SERVICESgetstartedlab 1➜ docker-test docker service ps lrd7bsarm31cID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTSpv0xalnz0jub getstartedlab_web.1 842071912/start-docker1:hellopy moby Running Running 2 minutes agoqrkj0dctgukn getstartedlab_web.2 842071912/start-docker1:hellopy moby Running Running 2 minutes agoxq97vphe37h5 getstartedlab_web.3 842071912/start-docker1:hellopy moby Running Running 2 minutes agokc0kj4tdzlpz getstartedlab_web.4 842071912/start-docker1:hellopy moby Running Running 2 minutes ago5roeqr1o8le3 getstartedlab_web.5 842071912/start-docker1:hellopy moby Running Running 2 minutes ago➜ docker-test docker container ls -q3b010bc1ba11e9c89868d2ee34cc4a84736ab697e352c20592db487d0025➜ docker-test docker stack rm getstartedlabRemoving service getstartedlab_webRemoving network getstartedlab_webnet➜ docker-test docker node lsID HOSTNAME STATUS AVAILABILITY MANAGER STATUSscxmr99cp0d6zjpajrckdktmk * moby Ready Active Leader➜ docker-test docker swarm leave --forceNode left the swarm.➜ docker-test docker node lsError response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again. 命令集12345678docker swarm initdocker stack ls # List stacks or appsdocker stack deploy -c &lt;composefile&gt; &lt;appname&gt; # Run the specified Compose filedocker service ls # List running services associated with an appdocker service ps &lt;service&gt; # List tasks associated with an appdocker inspect &lt;task or container&gt; # Inspect task or containerdocker container ls -q # List container IDsdocker stack rm &lt;appname&gt; # Tear down an application]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二进制数组转十六进制]]></title>
    <url>%2F2017%2F10%2F%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%2F</url>
    <content type="text"><![CDATA[二进制数组转十六进制1234567891011121314private static String byte2hex(byte [] buffer)&#123; String h = &quot;&quot;; for(int i = 0; i &lt; buffer.length; i++)&#123; String temp = Integer.toHexString(buffer[i] &amp; 0xFF); if(temp.length() == 1)&#123; temp = &quot;0&quot; + temp; &#125; h = h + &quot; &quot;+ temp; &#125; return h;&#125; 二进制输出二进制字符串1234567891011private static String byte2Str(byte [] buffer)&#123; String h = &quot;&quot;; for(int i = 0; i &lt; buffer.length; i++)&#123; String temp = Integer.toBinaryString(buffer[i]); h = h + &quot; &quot;+ temp; &#125; return h;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>byte</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea免费激活方法]]></title>
    <url>%2F2017%2F10%2Fidea%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[获取注册码http://idea.lanyus.com/http://www.98key.com/idea 填入license serverhttp://intellij.mandroid.cn/http://idea.imsxm.com/http://idea.iteblog.com/key.php]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac 安装使用Docker]]></title>
    <url>%2F2017%2F10%2Fmac-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Docker%2F</url>
    <content type="text"><![CDATA[docker安装与启动docker官网地址,下载dmg安装。12345678910111213$ docker run hello-worldHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.$ docker --version 构建第一个app官网文档 Build app 1234567891011121314$ lsDockerfile app.py requirements.txt$ docker build -t friendlyhello .Sending build context to Docker daemon 4.608kBStep 1/7 : FROM python:2.7-slim2.7-slim: Pulling from library/python$ docker imagesREPOSITORY TAG IMAGE IDfriendlyhello latest 326387cea398$ docker run -p 4000:80 friendlyhello 或 docker run -d -p 4000:80 friendlyhello #-d 后台运行 访问http://localhost:4000。CTRL+C退出 后台运行退出时12$ docker container ls #获取短CONTAINER ID$ docker stop id 分享image123456789docker logindocker tag image username/repository:tag #Tag the image比如：docker tag friendlyhello john/get-started:part2docker imagesdocker push username/repository:tag #Publish the imagedocker run -p 4000:80 username/repository:tag #Pull and run the image from the remote repository 容器&amp;镜像命令列表12345678910111213141516docker build -t friendlyname . # Create image using this directory&apos;s Dockerfiledocker run -p 4000:80 friendlyname # Run &quot;friendlyname&quot; mapping port 4000 to 80docker run -d -p 4000:80 friendlyname # Same thing, but in detached modedocker container ls # List all running containersdocker container ls -a # List all containers, even those not runningdocker container stop &lt;hash&gt; # Gracefully stop the specified containerdocker container kill &lt;hash&gt; # Force shutdown of the specified containerdocker container rm &lt;hash&gt; # Remove specified container from this machinedocker container rm $(docker container ls -a -q) # Remove all containersdocker image ls -a # List all images on this machinedocker image rm &lt;image id&gt; # Remove specified image from this machinedocker image rm $(docker image ls -a -q) # Remove all images from this machinedocker login # Log in this CLI session using your Docker credentialsdocker tag &lt;image&gt; username/repository:tag # Tag &lt;image&gt; for upload to registrydocker push username/repository:tag # Upload tagged image to registrydocker run username/repository:tag # Run image from a registry 镜像的获取12345678# 搜索镜像docker search &lt;image&gt; # 在docker index中搜索image# 下载镜像docker pull &lt;image&gt; # 从docker registry server 中下拉image# 查看镜像 docker images： # 列出imagesdocker images -a # 列出所有的images（包含历史）docker rmi &lt;image ID&gt;： # 删除一个或多个image 容器的使用12345678910111213141516# 查看容器 docker ps ：列出当前所有正在运行的container docker ps -l ：列出最近一次启动的container docker ps -a ：列出所有的container（包含历史，即运行过的container） docker ps -q ：列出最近一次运行的container ID# 再次启动容器 docker start/stop/restart &lt;container&gt; #：开启/停止/重启container docker start [container_id] #：再次运行某个container （包括历史container）#进入正在运行的docker容器 docker exec -it [container_id] /bin/bash docker run -i -t -p &lt;host_port:contain_port&gt; #：映射 HOST 端口到容器，方便外部访问容器内服务，host_port 可以省略，省略表示把 container_port 映射到一个动态端口。# 删除容器 docker rm &lt;container...&gt; #：删除一个或多个container docker rm `docker ps -a -q` #：删除所有的container docker ps -a -q | xargs docker rm #：同上, 删除所有的container]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jvm 工具]]></title>
    <url>%2F2017%2F10%2Fjvm-%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[常用工具jmap：生成堆快照jstat: 显示进程中的类装载、内存、垃圾收集、JIT编译等运行数据jhat：html形式显示对象占用内存大小以及引用情况jconsole（图形工具）jvisualvm（图形工具）MAT （第三方图形工具） jmap jmap -heap :当前堆内存分布信息，如From space, To Space等占用内存大小jmap -histo : 当前堆中对象占用内存大小情况，柱状图数据结构组织。可以简单得定位下当前占用内存最大的几个对象jmap -histo:live:先触发一次gc , 再统计对象占用内存情况。可以简单得定位下当前占用内存最大的几个对象以及对象是否可以被gc回收jmap -dump:format=b,file=heapDump: 导出堆详细使用信息，b表示二进制文件，之后采用其他工具分析，如jhat,mat.非常详细，可分析到对象之间的引用关系等。 jstat显示进程中的类装载、内存、垃圾收集、JIT编译等运行数据目前感觉用上的都是gc记录查看，实际还没太用过 jstat -gc 3331 250 20: 查询进程2764的垃圾收集情况，每250毫秒查询一次，一共查询20次。jstat- gcause jhat可用来分析 jmap dump生成的堆信息二进制文件。html形式显示对象占用内存大小以及引用情况，但显示得并不友好。感觉比较鸡肋。 jhat file jconsole（图形工具）Jconsole（Java Monitoring and Management Console）从java5开始，在JDK中自带的java监控和管理控制台，用于对JVM中内存，线程和类等的监控 jvisualvm（图形工具）用于查看 Java 虚拟机 (Java Virtual Machine, JVM) 上运行的基于 Java 技术的应用程序（Java 应用程序）的详细信息。 MATMAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。 资料http://www.jianshu.com/p/6bbab921102bhttp://www.ityouknow.com/]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netty 学习]]></title>
    <url>%2F2017%2F10%2FNetty-%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[idea初始化设置]]></title>
    <url>%2F2017%2F09%2Fidea%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[编程字体设置根据个人喜好选择喜欢的编程字体editor–&gt;font–&gt;font选用 Monospace 14字体，行距1.1（个人喜欢）或选用 Courier new 15字体，行距1. 去除大小写敏感 Editor –&gt; Code Completion，设置Case sensitive completion为none。 显示行号Editor -&gt; General -&gt; Appearance，勾选show line numbers。 设置编辑器和控制台的字体Appearence–&gt;override default fonts by设置为consolasCourier 修改文件默认签名Editor-&gt;File and Code Templates-&gt;Includes-&gt;File Header 123/** * Created by $&#123;USER&#125; on $&#123;DATE&#125;. */ 添加自定义代码补全Live TemplatesEditor -&gt; Live Templates 设置护眼色Editor-&gt; Color Schemebackground 设置为 C7EDCC]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac 安装java9]]></title>
    <url>%2F2017%2F09%2Fmac-%E5%AE%89%E8%A3%85java9%2F</url>
    <content type="text"><![CDATA[官网下载jdk9官网地址 修改配置mac环境修改配置文件vim .bash_profile 12export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/export PATH=$PATH:$JAVA_HOME/bin 使配置文件生效source .bash_profile]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins 入门使用]]></title>
    <url>%2F2017%2F09%2FJenkins-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下载官网下载 jenkins.war或者 brew install jenkins 启动和停止启动12345678设置开机自启动：sudo launchctl load -w /Library/LaunchDaemons/org.jenkins-ci.plist取消开机自启动：sudo launchctl unload -w /Library/LaunchDaemons/org.jenkins-ci.plist手动启动：Java -jar jenkins.war后台启动(默认端口)：nohup java -jar jenkins.war &amp;后台启动(指定端口)：nohup java -jar jenkins.war -httpPort=88 &amp;后台启动(HTTPS)：nohup java -jar jenkins.war -httpsPort=88 &amp;sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist 停止1sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist 运行远程脚本安装Jenkins SSH plugin插件在系统配置里配置Publish over SSH增加构建步骤send files or ececute commands over SSH12345SSH Server Name：选个一个你在系统设置里配置的名字Transfer Set Source files：需要上传的文件（注意：相对于工作区的路径。看后面的配置可以填写多个，默认用,分隔）Remove prefix：移除目录（只能指定Transfer Set Source files中的目录，这里移除了target目录表示只将FinServer.war传到目标服务器，否则会在目标服务器创建target目录）Remote directory：远程目录（根据你的需求填写，这里没有填写默认会继承系统配置，即/mnt）Exec command：把你要执行的命令写在里面(这里的命令是在目标服务器上执行的) 只需要配置Exec command就可以这种远程执行脚本的方式，属于非交互式Shell，不会触发诸如~/.bash_profile之类文件的载入,需要 export设置环境变量或者source]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 备份mysqldump]]></title>
    <url>%2F2017%2F09%2Fmysql-%E5%A4%87%E4%BB%BDmysqldump%2F</url>
    <content type="text"><![CDATA[备份数据库的某表数据1mysqldump -u root -p database_name table_name table_name2 &gt; database_dump.txt 备份整个数据库的数据1mysqldump -u root -p database_name &gt; database_dump.txt 备份所有数据库1mysqldump -u root -p --all-databases &gt; database_dump.txt]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>备份数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 流程控制语句if/case]]></title>
    <url>%2F2017%2F09%2Fmysql-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5if-case%2F</url>
    <content type="text"><![CDATA[if表达式 IF(expr1,expr2,expr3) 1select if(v=1,&apos;男&apos;,&apos;女&apos;) from t1 ; 如果条件判断多可以使用case when then。 case123456CASE &lt;单值表达式&gt; WHEN &lt;表达式值&gt; THEN &lt;SQL语句或者返回值&gt; WHEN &lt;表达式值&gt; THEN &lt;SQL语句或者返回值&gt; WHEN &lt;表达式值&gt; THEN &lt;SQL语句或者返回值&gt; ELSE &lt;SQL语句或者返回值&gt; END 简单Case函数写法12345select case v when 1 then &apos;男&apos; when 0 then &apos;女&apos; end from t1 ; Case搜索函数写法12345select case when v=1 then &apos;男&apos; when v=0 then &apos;女&apos; end from t1 ; 参考http://www.cnblogs.com/martinzhang/p/3220595.html]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oh-my-zsh使用]]></title>
    <url>%2F2017%2F09%2Foh-my-zsh%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[shell查看当前的shell cat /etc/shells 123456789# List of acceptable shells for chpass(1).# Ftpd will not allow users to connect who are not using# one of these shells./bin/bash/bin/csh/bin/ksh/bin/sh/bin/tcsh zsh 安装12CentOS 安装：sudo yum install -y zshmac 安装：brew install zsh zsh设置成系统默认shell，以代替bash chsh -s /bin/zsh oh-my-zshoh-my-zsh 是 zsh 的一个配置工具。安装 wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 安装插件 vim .zshrc 修改 plugins=(git) 为 plugins=(git autojump)使配置生效 source ~/.zshrc 修改主题.zshrc 中修改ZSH_THEME=’’ 打开sublime配置 alias st=’open -a “Sublime Text”‘]]></content>
  </entry>
  <entry>
    <title><![CDATA[PlanTasks使用-sublime待办插件]]></title>
    <url>%2F2017%2F09%2FPlanTasks%E4%BD%BF%E7%94%A8-sublime%E5%BE%85%E5%8A%9E%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[PlanTasksPlanTasks插件可以在我们的sublime编辑器里记录待办事，很方便，页面也很简单美观。 效果图 安装package control组件没有安装过插件的需要先安装package control组件才能安装插件Ctrl+ ` 调出console1import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read()) 创建todo文件以下类型文件会被识别为todo文件 12345TODO*.todo*.todolist*.taskpaper*.tasks 常用操作 创建project：输入一行文字在后方加上英文冒号就可以被识别为project，project是可以被折叠的，比如在任何地方输入Projects: 创建task：⌘+enter或者⌘+i, ⌘+shift+enter自动加上创建时间 完成task：⌘+d，两次⌘+d取消 打标签：在行尾添加@ ，前边有空格 上下行互换位置：⌘+control+up/down 归档:归档文件所有完成的任务⌘+shift+A,已完成的任务移动至文档结尾; 分割线：— ✄ ——，输入–，按tab键 设置优先级：行尾加@critical、@high、@low、@today （严重、高、低、今天） 时间标记： 开始时间：输入s,两次tab键 @started(13-10-25 15:20) 开关：状态切换输入tg,两次tab键 @toggle(13-10-25 15:20) 创建：创建输入cr,两次tab键 @created(13-10-25 15:20) 预期：输入d,两次tab键 @due() @due(17.1.1 1:1) 指定时间 @due(+w) = @due( +7) 当前时间加1周 @due(1) 1下月的第一天 ，2下月第二天 @due(+1) = @due(+) 当前时间加1天 @due(+2:) = @due(+2.) 当前时间加2h @due(+.2) = @due(+0.2) 当前时间加2m @due(+2.2) 当前时间加2h2m @due(+2 2.2) 当前时间加2d2h2m]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH 连接中断Write failed: Broken pipe]]></title>
    <url>%2F2017%2F09%2FSSH-%E8%BF%9E%E6%8E%A5%E4%B8%AD%E6%96%ADWrite-failed-Broken-pipe%2F</url>
    <content type="text"><![CDATA[ssh连接服务器后,一段时间不操作，再次操作时会出现Write failed: Broken pipe。解决方法：1、客户端设置：~/.ssh/ 文件夹中添加 config 文件，并添加下面的配置：ServerAliveInterval 602、在服务器的 /etc/ssh/sshd_config 中添加如下的配置：ClientAliveInterval 603、在登录命令添加参数：ssh -o ServerAliveInterval=60 user@sshserver 参考：http://blog.csdn.net/bbirdsky/article/details/21703555]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim使用]]></title>
    <url>%2F2017%2F09%2Fvim%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[vim编辑粘贴代码格式化vim粘贴代码会有代码代码错乱的问题 在粘贴前先设置进入粘贴插入模式，即不会自动缩进和连续注释set paste然后再进入插入模式粘贴在粘贴插入模式下代码是不会自动按格式缩进的，需要使用nopaste设置回来set nopaste也可以在.vimrc中设置切换的快捷键，比如设置F9，则可以在.vimrc中加入：set pastetoggle=这样直接在插入模式按F9就会在“– 插入 –”模式和“– 插入（粘贴） –”模式中切换 移动1234^ 移到当前行的第一个非空字符$ 移到当前行的最后一个字符G 移到文件的最后一行gg 移到文件的第一行 文本操作1234567891011:r file 读入文件 file 内容，并插在当前行后:nr file 读入文件 file 内容，并插在第 n 行后:r !pwd 插入当前路径yy 复制一行，此命令前可跟数字，标识复制多行，如6yy，表示从当前行开始复制6行yw 复制一个字y$ 复制到行末]p 有缩进的粘贴，vim会自动调节代码的缩进格式化全文： gg=G 替换与操作123:g/text1/s/text2/text3 查找包含 text1 的行，用 text3 替换 text2:g/text/command 在所有包含 text 的行运行 command 所表示的命令:v/text/command 在所有不包含 text 的行运行 command 所表示的命令 保存文本和退出12345:w 保存文件但不退出 vi:w file 将修改保存在 file 中但不退出 vi:wq 或 ZZ 或 :x 保存文件并退出 vi:q! 不保存文件，退出 vi:e! 放弃所有修改，从上次保存文件开始再编辑 vi 中的选项12:set number 显示行数:set nonumber 取消显示行数 vi 中的 shell 转义命令1234567:!command 执行 shell 的 command 命令，如 :!ls:!! 执行前一个 shell 命令:r!command 读取 command 命令的输入并插入，如 :r!ls 会先执行 ls，然后读入内容:w!command 将当前已编辑文件作为 command 命令的标准输入并执行 command 命令，如 :w!grep all:cd directory 将当前工作目录更改为 directory 所表示的目录:sh 将启动一个子 shell，使用 ^d(ctrl+d) 返回 vi:so file 在 shell 程序 file 中读入和执行命令 vim 分屏]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tmux使用]]></title>
    <url>%2F2017%2F09%2Ftmux%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[tmuxtmux是linux中一种管理窗口的程序。tmux提供了一个窗体组随时存储和恢复的功能。 tmux的基本概念tmux是一个终端复用器(terminal multiplexer).tmux有三个概念：会话(Session)，窗口(Window)，面板(Pane)。当你输入tmux后, tmux实际做的事是首先创建一个会话(Session), 然后在这个会话中创建一个窗口, 你可以继续创建多个窗口(Window), 每个窗口初始只包含一个面板, 继续分屏后, 会出现多个面板(Pane) 你在其中看到的终端实际上都属于tmux的某个面板。 tmux安装1[root@VM_1_49_centos ~]# yum install tmux 命令行 tmux new[-session] -s name -d 新建会话(-d 是否在后台) tmux new -s name -n windowname 新建会话及窗口 tmux at[tach] -t session 重新连接(-t 后接会话名称) tmux ls 显示保存的会话 tmux kill-session -t session 删除会话 常用操作所有快捷键执行方式：1control+b 告诉Tmux我要用Tmux的快捷键。 C-b ? 列出所有快捷键, 按q或Esc返回 C-b d detach当前会话,可暂时返回Shell界面，输入tmux attach能够重新进入之前会话 C-b s 选择并切换会话；在同时开启了多个会话时使用 快捷键sesson tmux new -s session_name creates a new tmux session named session_name tmux attach -t session_name attaches to an existing tmux session named session_name tmux switch -t session_name switches to an existing session named session_name tmux list-sessions lists existing tmux sessions tmux detach (prefix + d) detach the currently attached session C-b $ 改变会话的名字 1234567# 创建一个新的session$ tmux new -s &lt;name-of-my-session&gt;# 在当前session中创建一个新的Session, 并保证之前session依然存在# C-b : 然后输入下面命令new -s &lt;name-of-my-new-session&gt;# 进入名为test的session$ tmux attach -t test window C-b c 创建一个新窗口 C-b &amp; 关闭当前窗口 C-b w 列出所有的窗口选择 C-b p 切换到上一个窗口 C-b n 切换到下一个窗口 C-b 窗口号 使用窗口号切换窗口(例如窗口号为1的, 则C-b 1) C-b , 重命名当前窗口，便于识别各个窗口 C-b . 修改当前编号 pane C-b % 横向分Terminal C-b “ 纵向分Terminal C-b 方向键 则会在自由选择各面板 C-b x 关闭当前pane C-b q 显示面板编号 C-b o 选择当前窗口中下一个面板 C-b 数字 选择指定窗口 C-b z 暂时把一个窗体放到最大 开启批量执行（同步输入）C-b后输入:set synchronize-panes ，输入:set sync [TAB]键可自动补齐 设置鼠标C-b : 进入命令行 123setw mode-mouse on #单个窗口启用鼠标滚轮来卷动窗口内容setw -g mode-mouse on #所有窗口启用鼠标滚轮来卷动窗口内容 或者在配置文件里设置~/.tmux.conf：1234setw -g mouse-resize-pane on #开启用鼠标拖动调节pane的大小setw -g mouse-select-pane on #开启用鼠标点击pane来激活该panesetw -g mouse-select-window on #开启用鼠标点击来切换活动window 状态栏的窗口名称setw -g mode-mouse on #开启所有窗口启用鼠标滚轮来卷动窗口内容 配置之后进入命令行，输入 tmux source ~/.tmux.conf，使配置生效。 参考http://cenalulu.github.io/linux/tmux/http://guoqiao.me/post/2016/tmux]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次npm i 运行错误]]></title>
    <url>%2F2017%2F09%2F%E8%AE%B0%E4%B8%80%E6%AC%A1npm-i-%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[执行npm i出错: 1234npm ERR! code EINTEGRITYnpm ERR! sha1-eCA6TRwyiuHYbcpkYONptX9AVa4= integrity checksum failed when using sha1: wanted sha1-eCA6TRwyiuHYbcpkYONptX9AVa4= but got sha1-tURkGu3SzDOsTOBkGT5fXZCH7as=. (26893 bytes)npm ERR! A complete log of this run can be found in: 解决方法：npm cache clean –force 强制清除npm 的 cache或者重新执行 npm i]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 安装node&npm]]></title>
    <url>%2F2017%2F09%2Flinux-%E5%AE%89%E8%A3%85node-npm%2F</url>
    <content type="text"><![CDATA[官网地址node官网 安装步骤12345sudo yum install gcc-c++ makecurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -sudo yum -y install nodejs 说明：sudo bash 作为超级用户运行”bash” 查看版本123node -vnpm -v]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始自己的个人博客]]></title>
    <url>%2F2016%2F12%2F%E5%BC%80%E5%A7%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用hexo开始自己的博客。开篇先记录下hexo的使用。 安装安装特别简单，安装官网的步骤来很快搞定。12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 常用命令init$ hexo init [folder]新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new$ hexo new [layout] &lt;title&gt;新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate$ hexo generate生成静态文件。 选项 描述-d, –deploy 文件生成后立即部署网站-w, –watch 监视文件变动 publish$ hexo publish [layout] &lt;filename&gt;发表草稿。 server$ hexo server启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述-p, –port 重设端口-s, –static 只使用静态文件-l, –log 启动日记记录，使用覆盖记录格式 deploy$ hexo deploy部署网站。 参数 描述-g, –generate 部署之前预先生成静态文件 render$ hexo render &lt;file1&gt; [file2] ...渲染文件。 参数 描述-o, –output 设置输出路径 migrate$ hexo migrate &lt;type&gt;从其他博客系统 迁移内容。 clean$ hexo clean清除缓存文件 (db.json) 和已生成的静态文件 (public)。 list$ hexo list &lt;type&gt;列出网站资料。 version$ hexo version显示 Hexo 版本。 选项安全模式$ hexo --safe在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式$ hexo --debug在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式$ hexo --silent隐藏终端信息。 自定义配置文件的路径$ hexo --config custom.yml自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿$ hexo --draft显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD$ hexo --cwd /path/to/cwd自定义当前工作目录（Current working directory）的路径。 添加文章评论disq注册账号 https://disqus.com/，在theme的_config.yml中设置12345# Disqusdisqus: enable: true shortname: http-codr-top count: true 添加头像在theme的_config.yml中设置1avatar: /images/avatar.jpg 添加logoFavicon在线制作工具 http://tool.lu/favicon/，在theme的_config.yml中设置 1favicon: images/favicon.ico 炫酷动态背景12# Canvas-nestcanvas_nest: true 实现统计功能安装wordcount插件1sudo npm install hexo-wordcount --save 在theme的_config.yml中设置12345post_wordcount: item_text: true wordcount: true min2read: true separated_meta: true 阅读次数统计next集成了leancloud https://leancloud.cn/，在leancloud官网注册，设置leancloud_visitors12leancloud_visitors: enable: true 编写和发布草稿创建文章时：hexo new draft Test查看草稿的效果：hexo s –draft，或者在 _config.yml文件中进行配置render_drafts: true将草稿发布到_posts目录中：12hexo publish [layout] &lt;title&gt;比如：hexo publish post Test 参考http://cherryblog.site/hexo-3.html]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
