<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青松的博客</title>
  
  <subtitle>学习、记录、分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codr.top/"/>
  <updated>2019-01-06T00:19:01.000Z</updated>
  <id>http://www.codr.top/</id>
  
  <author>
    <name>qingsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java多线程编程核心技术-高洪岩-目录</title>
    <link href="http://www.codr.top/2019/01/%E7%9B%AE%E5%BD%95/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E9%AB%98%E6%B4%AA%E5%B2%A9-%E7%9B%AE%E5%BD%95/"/>
    <id>http://www.codr.top/2019/01/目录/Java多线程编程核心技术-高洪岩-目录/</id>
    <published>2019-01-06T00:05:12.000Z</published>
    <updated>2019-01-06T00:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line">前 言</div><div class="line">第1章 Java多线程技能，</div><div class="line">    1.1 进程和多线程的概念及线程的优点</div><div class="line">    1.2 使用多线程</div><div class="line">        1.2.1 继承Thread类</div><div class="line">        1.2.2 实现Runnable接口</div><div class="line">        1.2.3 实例变量与线程安全</div><div class="line">        1.2.4 留意i——与System.out.println（）的异常</div><div class="line">    1.3 currentThread（）方法</div><div class="line">    1.4 isAlive（）方法</div><div class="line">    1.5 sleep（）方法</div><div class="line">    1.6 getId（）方法</div><div class="line">    1.7 停止线程</div><div class="line">        1.7.1 停止不了的线程</div><div class="line">        1.7.2 判断线程是否是停止状态</div><div class="line">        1.7.3 能停止的线程——异常法</div><div class="line">        1.7.4 在沉睡中停止</div><div class="line">        1.7.5 能停止的线程——暴力停止</div><div class="line">        1.7.6 方法stop（）与java.lang.ThreadDeath异常</div><div class="line">        1.7.7 释放锁的不良后果</div><div class="line">        1.7.8 使用return停止线程</div><div class="line">    1.8 暂停线程</div><div class="line">        1.8.1 suspend与resume方法的使用</div><div class="line">        1.8.2 suspend与resume方法的缺点——独占</div><div class="line">        1.8.3 suspend与resume方法的缺点——不同步</div><div class="line">    1.9 yield方法</div><div class="line">    1.10 线程的优先级</div><div class="line">        1.10.1 线程优先级的继承特性</div><div class="line">        1.10.2 优先级具有规则性</div><div class="line">        1.10.3 优先级具有随机性</div><div class="line">        1.10.4 看谁运行得快</div><div class="line">    1.11 守护线程</div><div class="line">    1.12 本章小结</div><div class="line"></div><div class="line">第2章 对象及变量的并发访问</div><div class="line">    2.1 synchronized同步方法</div><div class="line">        2.1.1 方法内的变量为线程安全</div><div class="line">        2.1.2 实例变量非线程安全</div><div class="line">        2.1.3 多个对象多个锁</div><div class="line">        2.1.4 synchronized方法与锁对象</div><div class="line">        2.1.5 脏读</div><div class="line">        2.1.6 synchronized锁重入</div><div class="line">        2.1.7 出现异常，锁自动释放</div><div class="line">        2.1.8 同步不具有继承性</div><div class="line">    2.2 synchronized同步语句块</div><div class="line">        2.2.1 synchronized方法的弊端</div><div class="line">        2.2.2 synchronized同步代码块的使用</div><div class="line">        2.2.3 用同步代码块解决同步方法的弊端</div><div class="line">        2.2.4 一半异步，一半同步</div><div class="line">        2.2.5 synchronized代码块间的同步性</div><div class="line">        2.2.6 验证同步synchronized（this）代码块是锁定当前对象的</div><div class="line">        2.2.7 将任意对象作为对象监视器</div><div class="line">        2.2.8 细化验证3个结论</div><div class="line">        2.2.9 静态同步synchronized方法与synchronized（class）代码块</div><div class="line">        2.2.10 数据类型String的常量池特性</div><div class="line">        2.2.11 同步synchronized方法无限等待与解决</div><div class="line">        2.2.12 多线程的死锁</div><div class="line">        2.2.13 内置类与静态内置类</div><div class="line">        2.2.14 内置类与同步：实验1</div><div class="line">        2.2.15 内置类与同步：实验2</div><div class="line">        2.2.16 锁对象的改变</div><div class="line">    2.3 volatile关键字</div><div class="line">        2.3.1 关键字volatile与死循环</div><div class="line">        2.3.2 解决同步死循环</div><div class="line">        2.3.3 解决异步死循环</div><div class="line">        2.3.4 volatile非原子的特性</div><div class="line">        2.3.5 使用原子类进行i++操作</div><div class="line">        2.3.6 原子类也并不完全安全</div><div class="line">        2.3.7 synchronized代码块有volatile同步的功能</div><div class="line">    2.4 本章总结</div><div class="line"></div><div class="line">第3章 线程间通信</div><div class="line">    3.1 等待/通知机制</div><div class="line">        3.1.1 不使用等待/通知机制实现线程间通信</div><div class="line">        3.1.2 什么是等待/通知机制</div><div class="line">        3.1.3 等待/通知机制的实现</div><div class="line">        3.1.4 方法wait（）锁释放与notify（）锁不释放</div><div class="line">        3.1.5 当interrupt方法遇到wait方法</div><div class="line">        3.1.6 只通知一个线程</div><div class="line">        3.1.7 唤醒所有线程</div><div class="line">        3.1.8 方法wait（long）的使用</div><div class="line">        3.1.9 通知过早</div><div class="line">        3.1.10 等待wait的条件发生变化</div><div class="line">        3.1.11 生产者/消费者模式实现</div><div class="line">        3.1.12 通过管道进行线程间通信：字节流</div><div class="line">        3.1.13 通过管道进行线程间通信：字符流</div><div class="line">        3.1.14 实战：等待/通知之交叉备份</div><div class="line">    3.2 方法join的使用</div><div class="line">        3.2.1 学习方法join前的铺垫</div><div class="line">        3.2.2 用join（）方法来解决</div><div class="line">        3.2.3 方法join与异常</div><div class="line">        3.2.4 方法join（long）的使用</div><div class="line">        3.2.5 方法join（long）与sleep（long）的区别</div><div class="line">        3.2.6 方法join（）后面的代码提前运行：出现意外</div><div class="line">        3.2.7 方法join（）后面的代码提前运行：解释意外</div><div class="line">    3.3 类ThreadLocal的使用</div><div class="line">        3.3.1 方法get（）与null</div><div class="line">        3.3.2 验证线程变量的隔离性</div><div class="line">        3.3.3 解决get（）返回null问题</div><div class="line">        3.3.4 再次验证线程变量的隔离性</div><div class="line">    3.4 类InheritableThreadLocal的使用</div><div class="line">        3.4.1 值继承</div><div class="line">        3.4.2 值继承再修改</div><div class="line">    3.5 本章总结</div><div class="line"></div><div class="line">第4章 Lock的使用</div><div class="line">    4.1 使用ReentrantLock类</div><div class="line">        4.1.1 使用ReentrantLock实现同步：测试1</div><div class="line">        4.1.2 使用ReentrantLock实现同步：测试2</div><div class="line">        4.1.3 使用Condition实现等待/通知错误用法与解决</div><div class="line">        4.1.4 正确使用Condition实现等待/通知</div><div class="line">        4.1.5 使用多个Condition实现通知部分线程：错误用法</div><div class="line">        4.1.6 使用多个Condition实现通知部分线程：正确用法</div><div class="line">        4.1.7 实现生产者/消费者模式：一对一交替打印</div><div class="line">        4.1.8 实现生产者/消费者模式：多对多交替打印</div><div class="line">        4.1.9 公平锁与非公平锁</div><div class="line">        4.1.10 方法getHoldCount（）、getQueueLength（）和getWaitQueueLength（）的测试</div><div class="line">        4.1.11 方法hasQueuedThread（）、hasQueuedThreads（）和hasWaiters（）的测试</div><div class="line">        4.1.12 方法isFair（）、isHeldByCurrentThread（）和isLocked（）的测试</div><div class="line">        4.1.13 方法lockInterruptibly（）、tryLock（）和tryLock（long timeout，TimeUnit unit）的测试</div><div class="line">        4.1.14 方法awaitUninterruptibly（）的使用</div><div class="line">        4.1.15 方法awaitUntil（）的使用</div><div class="line">        4.1.16 使用Condition实现顺序执行</div><div class="line">    4.2 使用ReentrantReadWriteLock类</div><div class="line">        4.2.1 类ReentrantReadWriteLock的使用：读读共享</div><div class="line">        4.2.2 类ReentrantReadWriteLock的使用：写写互斥</div><div class="line">        4.2.3 类ReentrantReadWriteLock的使用：读写互斥</div><div class="line">        4.2.4 类ReentrantReadWriteLock的使用：写读互斥</div><div class="line">    4.3 本章总结</div><div class="line"></div><div class="line">第5章 定时器Timer</div><div class="line">    5.1 定时器Timer的使用</div><div class="line">        5.1.1 方法schedule（TimerTask task， Date time）的测试</div><div class="line">        5.1.2 方法schedule（TimerTask task， Date firstTime， long period）的测试</div><div class="line">        5.1.3 方法schedule（TimerTask task， long delay）的测试</div><div class="line">        5.1.4 方法schedule（TimerTask task， long delay， long period）的测试</div><div class="line">        5.1.5 方法scheduleAtFixedRate（TimerTask task， Date firstTime， long period）的测试</div><div class="line">    5.2 本章总结</div><div class="line"></div><div class="line">第6章 单例模式与多线程</div><div class="line">    6.1 立即加载/&quot;饿汉模式&quot;</div><div class="line">    6.2 延迟加载/&quot;懒汉模式&quot;</div><div class="line">    6.3 使用静态内置类实现单例模式</div><div class="line">    6.4 序列化与反序列化的单例模式实现</div><div class="line">    6.5 使用static代码块实现单例模式</div><div class="line">    6.6 使用enum枚举数据类型实现单例模式</div><div class="line">    6.7 完善使用enum枚举实现单例模式</div><div class="line">    6.8 本章总结</div><div class="line"></div><div class="line">第7章 拾遗增补</div><div class="line">    7.1 线程的状态</div><div class="line">        7.1.1 验证NEW、RUNNABLE和TERMINATED</div><div class="line">        7.1.2 验证TIMED_WAITING</div><div class="line">        7.1.3 验证BLOCKED</div><div class="line">        7.1.4 验证WAITING</div><div class="line">    7.2 线程组</div><div class="line">        7.2.1 线程对象关联线程组：1级关联</div><div class="line">        7.2.2 线程对象关联线程组：多级关联</div><div class="line">        7.2.3 线程组自动归属特性</div><div class="line">        7.2.4 获取根线程组</div><div class="line">        7.2.5 线程组里加线程组</div><div class="line">        7.2.6 组内的线程批量停止</div><div class="line">        7.2.7 递归与非递归取得组内对象</div><div class="line">    7.3 使线程具有有序性</div><div class="line">    7.4 SimpleDateFormat非线程安全</div><div class="line">        7.4.1 出现异常</div><div class="line">        7.4.2 解决异常方法1</div><div class="line">        7.4.3 解决异常方法2</div><div class="line">    7.5 线程中出现异常的处理</div><div class="line">    7.6 线程组内处理异常</div><div class="line">    7.7 线程异常处理的传递</div><div class="line">    7.8 本章总结</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
      <category term="目录" scheme="http://www.codr.top/categories/%E7%9B%AE%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>实战Java高并发程序设计-葛一鸣-目录</title>
    <link href="http://www.codr.top/2019/01/%E7%9B%AE%E5%BD%95/%E5%AE%9E%E6%88%98Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E8%91%9B%E4%B8%80%E9%B8%A3-%E7%9B%AE%E5%BD%95/"/>
    <id>http://www.codr.top/2019/01/目录/实战Java高并发程序设计-葛一鸣-目录/</id>
    <published>2019-01-06T00:02:45.000Z</published>
    <updated>2019-01-06T00:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line">第1章走入并行世界 </div><div class="line">    1.1何去何从的并行计算 </div><div class="line">        1.1.1忘掉那该死的并行 </div><div class="line">        1.1.2可怕的现实：摩尔定律的失效 </div><div class="line">        1.1.3柳暗花明：不断地前进 </div><div class="line">        1.1.4光明或是黑暗 </div><div class="line">    1.2你必须知道的几个概念 </div><div class="line">        1.2.1同步（Synchronous）和异步（Asynchronous） </div><div class="line">        1.2.2并发（Concurrency）和并行（Parallelism） </div><div class="line">        1.2.3临界区 </div><div class="line">        1.2.4阻塞（Blocking）和非阻塞（Non—Blocking） </div><div class="line">        1.2.5死锁（Deadlock）、饥饿（Starvation）和活锁（Livelock） </div><div class="line">    1.3并发级别 </div><div class="line">        1.3.1阻塞（Blocking） </div><div class="line">        1.3.2无饥饿（Starvation—Free） </div><div class="line">        1.3.3无障碍（Obstruction—Free） </div><div class="line">        1.3.4无锁（Lock—Free） </div><div class="line">        1.3.5无等待（Wait—Free） </div><div class="line">    1.4有关并行的两个重要定律 </div><div class="line">        1.4.1Amdahl定律 </div><div class="line">        1.4.2Gustafson定律 </div><div class="line">        1.4.3Amdahl定律和Gustafson定律是否相互矛盾 </div><div class="line">    1.5回到Java：JMM </div><div class="line">        1.5.1原子性（Atomicity） </div><div class="line">        1.5.2可见性（Visibility） </div><div class="line">        1.5.3有序性（Ordering） </div><div class="line">        1.5.4哪些指令不能重排：Happen—Before规则 </div><div class="line">    1.6参考文献 </div><div class="line">第2章Java并行程序基础 </div><div class="line">    2.1有关线程你必须知道的事 </div><div class="line">    2.2初始线程：线程的基本操作 </div><div class="line">        2.2.1新建线程 </div><div class="line">        2.2.2终止线程 </div><div class="line">        2.2.3线程中断 </div><div class="line">        2.2.4等待（wait）和通知（notify） </div><div class="line">        2.2.5挂起（suspend）和继续执行（resume）线程 </div><div class="line">        2.2.6等待线程结束（join）和谦让（yield） </div><div class="line">    2.3volatile与Java内存模型（JMM） </div><div class="line">    2.4分门别类的管理：线程组 </div><div class="line">    2.5驻守后台：守护线程（Daemon） </div><div class="line">    2.6先干重要的事：线程优先级 </div><div class="line">    2.7线程安全的概念与synchronized </div><div class="line">    2.8程序中的幽灵：隐蔽的错误 </div><div class="line">        2.8.1无提示的错误案例 </div><div class="line">        2.8.2并发下的ArrayList </div><div class="line">        2.8.3并发下诡异的HashMap </div><div class="line">        2.8.4初学者常见问题：错误的加锁 </div><div class="line">    2.9参考文献 </div><div class="line">第3章JDK并发包 </div><div class="line">    3.1多线程的团队协作：同步控制 </div><div class="line">        3.1.1synchronized的功能扩展：重入锁 </div><div class="line">        3.1.2重入锁的好搭档：Condition条件 </div><div class="line">        3.1.3允许多个线程同时访问：信号量（Semaphore） </div><div class="line">        3.1.4ReadWriteLock读写锁 </div><div class="line">        3.1.5倒计时器：CountDownLatch </div><div class="line">        3.1.6循环栅栏：CyclicBarrier </div><div class="line">        3.1.7线程阻塞工具类：LockSupport </div><div class="line">    3.2线程复用：线程池 </div><div class="line">        3.2.1什么是线程池 </div><div class="line">        3.2.2不要重复发明轮子：JDK对线程池的支持 </div><div class="line">        3.2.3刨根究底：核心线程池的内部实现 </div><div class="line">        3.2.4超负载了怎么办：拒绝策略 </div><div class="line">        3.2.5自定义线程创建：ThreadFactory </div><div class="line">        3.2.6我的应用我做主：扩展线程池 </div><div class="line">        3.2.7合理的选择：优化线程池线程数量 </div><div class="line">        3.2.8堆栈去哪里了：在线程池中寻找堆栈 </div><div class="line">        3.2.9分而治之：Fork／Join框架 </div><div class="line">    3.3不要重复发明轮子：JDK的并发容器 </div><div class="line">        3.3.1超好用的工具类：并发集合简介 </div><div class="line">        3.3.2线程安全的HashMap </div><div class="line">        3.3.3有关List的线程安全 </div><div class="line">        3.3.4高效读写的队列：深度剖析ConcurrentLinkedQueue </div><div class="line">        3.3.5高效读取：不变模式下的CopyOnWriteArrayList </div><div class="line">        3.3.6数据共享通道：BlockingQueue </div><div class="line">        3.3.7随机数据结构：跳表（SkipList） </div><div class="line">    3.4参考资料 </div><div class="line">第4章锁的优化及注意事项 </div><div class="line">    4.1有助于提高“锁”性能的几点建议 </div><div class="line">        4.1.1减小锁持有时间 </div><div class="line">        4.1.2减小锁粒度 </div><div class="line">        4.1.3读写分离锁来替换独占锁 </div><div class="line">        4.1.4锁分离 </div><div class="line">        4.1.5锁粗化 </div><div class="line">    4.2Java虚拟机对锁优化所做的努力 </div><div class="line">        4.2.1锁偏向 </div><div class="line">        4.2.2轻量级锁 </div><div class="line">        4.2.3自旋锁 </div><div class="line">        4.2.4锁消除 </div><div class="line">    4.3人手一支笔：ThreadLocal </div><div class="line">        4.3.1ThreadLocal的简单使用 </div><div class="line">        4.3.2ThreadLocal的实现原理 </div><div class="line">        4.3.3对性能有何帮助 </div><div class="line">    4.4无锁 </div><div class="line">        4.4.1与众不同的并发策略：比较交换（CAS） </div><div class="line">        4.4.2无锁的线程安全整数：AtomicInteger </div><div class="line">        4.4.3Java中的指针：Unsafe类 </div><div class="line">        4.4.4无锁的对象引用：AtomicReference </div><div class="line">        4.4.5带有时间戳的对象引用：AtomicStampedReference </div><div class="line">        4.4.6数组也能无锁：AtomicIntegerArray </div><div class="line">        4.4.7让普通变量也享受原子操作：AtomicIntegerFieldUpdater </div><div class="line">        4.4.8挑战无锁算法：无锁的Vector实现 </div><div class="line">        4.4.9让线程之间互相帮助：细看SynchronousQueue的实现 </div><div class="line">    4.5有关死锁的问题 </div><div class="line">    4.6参考文献 </div><div class="line">第5章并行模式与算法 </div><div class="line">    5.1探讨单例模式 </div><div class="line">    5.2不变模式 </div><div class="line">    5.3生产者—消费者模式 </div><div class="line">    5.4高性能的生产者—消费者：无锁的实现 </div><div class="line">        5.4.1无锁的缓存框架：Disruptor </div><div class="line">        5.4.2用Disruptor实现生产者—消费者案例 </div><div class="line">        5.4.3提高消费者的响应时间：选择合适的策略 </div><div class="line">        5.4.4CPUCache的优化：解决伪共享问题 </div><div class="line">    5.5Future模式 </div><div class="line">        5.5.1Future模式的主要角色 </div><div class="line">        5.5.2Future模式的简单实现 </div><div class="line">        5.5.3JDK中的Future模式 </div><div class="line">    5.6并行流水线 </div><div class="line">    5.7并行搜索 </div><div class="line">    5.8并行排序 </div><div class="line">        5.8.1分离数据相关性：奇偶交换排序 </div><div class="line">        5.8.2改进的插入排序：希尔排序 </div><div class="line">    5.9并行算法：矩阵乘法 </div><div class="line">    5.10准备好了再通知我：网络NIO </div><div class="line">        5.10.1基于Socket的服务端的多线程模式 </div><div class="line">        5.10.2使用NIO进行网络编程 </div><div class="line">        5.10.3使用NIO来实现客户端 </div><div class="line">    5.11读完了再通知我：AIO </div><div class="line">        5.11.1AIOEchoServer的实现 </div><div class="line">        5.11.2AIOEcho客户端实现 </div><div class="line">    5.12参考文献 </div><div class="line">第6章Java8与并发 </div><div class="line">    6.1Java8的函数式编程简介 </div><div class="line">        6.1.1函数作为一等公民 </div><div class="line">        6.1.2无副作用 </div><div class="line">        6.1.3申明式的（Declarative） </div><div class="line">        6.1.4不变的对象 </div><div class="line">        6.1.5易于并行 </div><div class="line">        6.1.6更少的代码 </div><div class="line">    6.2函数式编程基础 </div><div class="line">        6.2.1FunctionalInterface注释 </div><div class="line">        6.2.2接口默认方法 </div><div class="line">        6.2.3lambda表达式 </div><div class="line">        6.2.4方法引用 </div><div class="line">    6.3一步一步走入函数式编程 </div><div class="line">    6.4并行流与并行排序 </div><div class="line">        6.4.1使用并行流过滤数据 </div><div class="line">        6.4.2从集合得到并行流 </div><div class="line">        6.4.3并行排序 </div><div class="line">    6.5增强的Future：CompletableFuture </div><div class="line">        6.5.1完成了就通知我 </div><div class="line">        6.5.2异步执行任务 </div><div class="line">        6.5.3流式调用 </div><div class="line">        6.5.4CompletableFuture中的异常处理 </div><div class="line">        6.5.5组合多个CompletableFuture </div><div class="line">    6.6读写锁的改进：StampedLock </div><div class="line">        6.6.1StampedLock使用示例 </div><div class="line">        6.6.2StampedLock的小陷阱 </div><div class="line">        6.6.3有关StampedLock的实现思想 </div><div class="line">    6.7原子类的增强 </div><div class="line">        6.7.1更快的原子类：LongAdder </div><div class="line">        6.7.2LongAdder的功能增强版：LongAccumulator </div><div class="line">    6.8参考文献 </div><div class="line">第7章使用Akka构建高并发程序 </div><div class="line">    7.1新并发模型：Actor </div><div class="line">    7.2Akka之HelloWorld </div><div class="line">    7.3有关消息投递的一些说明 </div><div class="line">    7.4Actor的生命周期 </div><div class="line">    7.5监督策略 </div><div class="line">    7.6选择Actor </div><div class="line">    7.7消息收件箱（Inbox） </div><div class="line">    7.8消息路由 </div><div class="line">    7.9Actor的内置状态转换 </div><div class="line">    7.10询问模式：Actor中的Future </div><div class="line">    7.11多个Actor同时修改数据：Agent </div><div class="line">    7.12像数据库一样操作内存数据：软件事务内存 </div><div class="line">    7.13一个有趣的例子：并发粒子群的实现 </div><div class="line">        7.13.1什么是粒子群算法 </div><div class="line">        7.13.2粒子群算法的计算过程 </div><div class="line">        7.13.3粒子群算法能做什么 </div><div class="line">        7.13.4使用Akka实现粒子群 </div><div class="line">    7.14参考文献 </div><div class="line">第8章并行程序调试 </div><div class="line">    8.1准备实验样本 </div><div class="line">    8.2正式起航 </div><div class="line">    8.3挂起整个虚拟机 </div><div class="line">    8.4调试进入ArrayList内部</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
      <category term="目录" scheme="http://www.codr.top/categories/%E7%9B%AE%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>java中HashMap源码笔记</title>
    <link href="http://www.codr.top/2019/01/Java/java%E4%B8%ADHashMap%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.codr.top/2019/01/Java/java中HashMap源码笔记/</id>
    <published>2019-01-01T01:33:24.000Z</published>
    <updated>2019-01-07T03:25:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap概述"><a href="#HashMap概述" class="headerlink" title="HashMap概述"></a>HashMap概述</h2><p>HashMap基于哈希表的 Map 接口的实现。并允许使用 null 值和 null 键。（除了不同步和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。）<br>HashMap的数据结构使用数组和链表来实现对数据的存储，jdk1.8之后链表节点达到8之后转为红黑树。默认初始化容量为16（DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16），扩容因子0.75（DEFAULT_LOAD_FACTOR = 0.75f），树化链表值是8（TREEIFY_THRESHOLD = 8）。<br>HashMap为线程不安全，多线程操作会导致其死循环。</p><h2 id="数组-链表数据结构"><a href="#数组-链表数据结构" class="headerlink" title="数组+链表数据结构"></a>数组+链表数据结构</h2><p>HashMap的底层主要是基于数组和链表来实现的，它之所以有相当快的查询速度主要是因为它是通过计算散列码来决定存储的位置。如果存储的对象对多了，就有可能不同的对象所算出来的hash值是相同的，这就出现了所谓的hash冲突。解决hash冲突的方法有很多，HashMap底层是通过链表来解决hash冲突的。<br>数组的特点是：寻址容易，插入和删除困难。<br>链表的特点是：寻址困难，插入和删除容易。</p><p><img src="http://ww1.sinaimg.cn/large/99c92116ly1fyxs8t9ao1j20f10co75l.jpg" alt=""></p><h2 id="put插入方法"><a href="#put插入方法" class="headerlink" title="put插入方法"></a>put插入方法</h2><p>put数据过程</p><ol><li>key计算hash值</li><li>找位置，根据hash值取模找对应的数组中位置，（取模操作(n - 1) &amp; hash，n为数组的长度，相当于hash%n，位运算效率更高 ）</li><li>放入数据，如果为空放入数组，如果有hash碰撞，放入链表中，如果链表长度超过8，转化为红黑树</li><li>判断大小是否需要扩容</li></ol><p>先把key做下hash值计算：hash(key)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public V put(K key, V value) &#123;</div><div class="line">    return putVal(hash(key), key, value, false, true);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据hash值判断放入数组链表相应位置中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Implements Map.put and related methods</div><div class="line"> *</div><div class="line"> * @param hash hash for key</div><div class="line"> * @param key the key</div><div class="line"> * @param value the value to put</div><div class="line"> * @param onlyIfAbsent if true, don&apos;t change existing value</div><div class="line"> * @param evict if false, the table is in creation mode.</div><div class="line"> * @return previous value, or null if none</div><div class="line"> */</div><div class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</div><div class="line">                   boolean evict) &#123;</div><div class="line">        // tab 数组，p指向节点， n数组长度，i取模索引位置</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class="line">        // 数组没有创建初始化数组</div><div class="line">        if ((tab = table) == null || (n = tab.length) == 0)</div><div class="line">            n = (tab = resize()).length;</div><div class="line">        // 找放入的位置</div><div class="line">        // 1. 如果数组hash对应索引元素为空，创建数据赋值</div><div class="line">        if ((p = tab[i = (n - 1) &amp; hash]) == null)</div><div class="line">            tab[i] = newNode(hash, key, value, null);</div><div class="line">        else &#123;</div><div class="line">            Node&lt;K,V&gt; e; K k;</div><div class="line">            // 2. 如果和第一个节点hash值相同，key值相同，已存在</div><div class="line">            if (p.hash == hash &amp;&amp;</div><div class="line">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                e = p;</div><div class="line">            // 3. 如果是红黑树节点，放入树节点</div><div class="line">            else if (p instanceof TreeNode)</div><div class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</div><div class="line">            else &#123;</div><div class="line">            // 4. hash冲突，放到链表最后一个节点，或者转换为树 </div><div class="line">                for (int binCount = 0; ; ++binCount) &#123;</div><div class="line">                    if ((e = p.next) == null) &#123;</div><div class="line">                        p.next = newNode(hash, key, value, null);</div><div class="line">                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</div><div class="line">                            treeifyBin(tab, hash);</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                    if (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                        break;</div><div class="line">                    p = e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 如果已经存在，则替换为新value</div><div class="line">            if (e != null) &#123; // existing mapping for key</div><div class="line">                V oldValue = e.value;</div><div class="line">                if (!onlyIfAbsent || oldValue == null)</div><div class="line">                    e.value = value;</div><div class="line">                afterNodeAccess(e);</div><div class="line">                return oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ++modCount;</div><div class="line">        // 判断大小是否超过阀值</div><div class="line">        if (++size &gt; threshold)</div><div class="line">            resize();</div><div class="line">        afterNodeInsertion(evict);</div><div class="line">        return null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="get查询方法"><a href="#get查询方法" class="headerlink" title="get查询方法"></a>get查询方法</h2><p>get数据过程</p><ol><li>key计算hash值</li><li>找位置，如果第一key值相同，直接返回，不相同遍历链表中数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public V get(Object key) &#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    return (e = getNode(hash(key), key)) == null ? null : e.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Implements Map.get and related methods</div><div class="line"> *</div><div class="line"> * @param hash hash for key</div><div class="line"> * @param key the key</div><div class="line"> * @return the node, or null if none</div><div class="line"> */</div><div class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</div><div class="line">    // (n - 1) &amp; hash 就是取模定位数组的索引</div><div class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class="line">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</div><div class="line">        if (first.hash == hash &amp;&amp; // always check first node</div><div class="line">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">            // 数组中找到，返回</div><div class="line">            return first;</div><div class="line">        // 找链表中数据</div><div class="line">        if ((e = first.next) != null) &#123;</div><div class="line">            if (first instanceof TreeNode)</div><div class="line">            // 递归树查找</div><div class="line">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            do &#123;</div><div class="line">            // 遍历链表</div><div class="line">                if (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                    return e;</div><div class="line">            &#125; while ((e = e.next) != null);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="数组长度为什么总是设定为-2-的-N-次方？"><a href="#数组长度为什么总是设定为-2-的-N-次方？" class="headerlink" title="数组长度为什么总是设定为 2 的 N 次方？"></a>数组长度为什么总是设定为 2 的 N 次方？</h2><ol><li>取模快。<br>其实就是上面为什么快的原因：位与取模比 % 取模要快的多。</li><li>分散平均，减少碰撞。<br>这个是主要原因。<br>如果二进制某位包含 0，则此位置上的数据不同对应的 hash 却是相同，碰撞发生，而 (2^x - 1) 的二进制是 0111111…，分散非常平均，碰撞也是最少的。</li></ol><h2 id="解决hash冲突的办法"><a href="#解决hash冲突的办法" class="headerlink" title="解决hash冲突的办法"></a>解决hash冲突的办法</h2><ol><li>开放定址法（线性探测再散列，二次探测再散列，伪随机探测再散列）</li><li>再哈希法</li><li>链地址法</li><li>建立一个公共溢出区</li></ol><p>hashmap的解决办法就是采用的链地址法</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/fighterandknight/article/details/61624150" target="_blank" rel="external">https://blog.csdn.net/fighterandknight/article/details/61624150</a><br><a href="http://jayfeng.com/2016/12/28/%E7%90%86%E8%A7%A3HashMap/" target="_blank" rel="external">http://jayfeng.com/2016/12/28/%E7%90%86%E8%A7%A3HashMap/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashMap概述&quot;&gt;&lt;a href=&quot;#HashMap概述&quot; class=&quot;headerlink&quot; title=&quot;HashMap概述&quot;&gt;&lt;/a&gt;HashMap概述&lt;/h2&gt;&lt;p&gt;HashMap基于哈希表的 Map 接口的实现。并允许使用 null 值和 null
      
    
    </summary>
    
      <category term="java" scheme="http://www.codr.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.codr.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>jvm方法区内存溢出</title>
    <link href="http://www.codr.top/2018/07/JVM/jvm%E6%96%B9%E6%B3%95%E5%8C%BA%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <id>http://www.codr.top/2018/07/JVM/jvm方法区内存溢出/</id>
    <published>2018-07-11T02:24:45.000Z</published>
    <updated>2018-09-18T13:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>java.lang.OutOfMemoryError: PermGen space</p><ul><li>jps查看java程序pid</li><li>保存heap：jmap -dump:format=b,file=heap.hprof pid，之后使用java自带工具jvisualvm分析数据</li><li>top查看cpu占用情况</li><li>top -H -p pid查看该进程具体线程情况 或者ps -mp pid -o THREAD,did,time</li><li>查看问题线程堆栈 ，查看该线程的堆栈情况，先将线程id转为16进制，使用printf “%x\n” tid命令进行转换，再使用jstack命令打印线程堆栈信息，命令格式：jstack pid |grep tid -A 30</li><li>jstat -gcutil pid 2000 10 命令查看进程的内存情况</li><li>jstack命令查看进程的堆栈情况</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java.lang.OutOfMemoryError: PermGen space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jps查看java程序pid&lt;/li&gt;
&lt;li&gt;保存heap：jmap -dump:format=b,file=heap.hprof pid，之后使用java自带工
      
    
    </summary>
    
      <category term="JVM" scheme="http://www.codr.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://www.codr.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot和redis实现session共享</title>
    <link href="http://www.codr.top/2018/07/spring%E5%AE%B6%E6%97%8F/SpringBoot%E5%92%8Credis%E5%AE%9E%E7%8E%B0session%E5%85%B1%E4%BA%AB/"/>
    <id>http://www.codr.top/2018/07/spring家族/SpringBoot和redis实现session共享/</id>
    <published>2018-07-05T10:31:40.000Z</published>
    <updated>2018-09-18T13:55:29.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>添加@EnableRedisHttpSession来开启spring session支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Configuration  </div><div class="line">@EnableRedisHttpSession  </div><div class="line">public class RedisSessionConfig &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>@EnableRedisHttpSession这个注解是由spring-session-data-redis提供的，所以在pom.xml文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;  </div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </div><div class="line">        &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;  </div><div class="line">&lt;/dependency&gt;  </div><div class="line">&lt;dependency&gt;  </div><div class="line">        &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;  </div><div class="line">        &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;  </div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></li><li><p>application.yml 添加redis配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  redis.host: xxxxxx</div><div class="line">  redis.port: xxxx</div><div class="line">  redis.password: xxxx</div></pre></td></tr></table></figure></li><li><p>idea启动项目两个实例<br>4.1 选择“Edit Configurations”，取消“Single instance only”选项<br>4.2 复制springboot 运行配置<br>4.3 在VM options项中填写-Dserver.port=8082，设置这个实例的运行端口为8082</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加@EnableRedisHttpSession来开启spring session支持&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.codr.top/categories/SpringBoot/"/>
    
    
      <category term="spring" scheme="http://www.codr.top/tags/spring/"/>
    
      <category term="后端" scheme="http://www.codr.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="SpringBoot" scheme="http://www.codr.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>java中对象克隆</title>
    <link href="http://www.codr.top/2018/06/Java/java%E4%B8%AD%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86/"/>
    <id>http://www.codr.top/2018/06/Java/java中对象克隆/</id>
    <published>2018-06-12T23:39:47.000Z</published>
    <updated>2018-09-18T13:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>在Java语言中，所有的Java类都继承自java.lang.Object。事实上，Object类提供一个clone()方法，可以将一个Java对象复制一份。因此在Java中可以直接使用Object提供的clone()方法来实现对象的克隆。需要注意的是能够实现克隆的类必须实现接口Cloneable。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object object = null;</div><div class="line">try &#123;</div><div class="line">　　　object = super.clone();</div><div class="line">&#125; catch (CloneNotSupportedException exception) &#123;</div><div class="line">　　　System.err.println(&quot;Not support cloneable&quot;);</div><div class="line">&#125;</div><div class="line">return (Prototype )object;</div></pre></td></tr></table></figure></p><h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>在Java语言中，如果需要实现深克隆，可以通过序列化(Serialization)等方式来实现。序列化就是将对象写到流的过程，写到流中的对象是原有对象的一个拷贝，而原对象仍然存在于内存中。通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。需要注意的是能够实现序列化的对象其类必须实现Serializable接口，否则无法实现序列化操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//将对象写入流中</div><div class="line">ByteArrayOutputStream bao=new  ByteArrayOutputStream();</div><div class="line">ObjectOutputStream oos=new  ObjectOutputStream(bao);</div><div class="line">oos.writeObject(this);</div><div class="line"></div><div class="line">//将对象从流中取出</div><div class="line">ByteArrayInputStream bis=new  ByteArrayInputStream(bao.toByteArray());</div><div class="line">ObjectInputStream ois=new  ObjectInputStream(bis);</div><div class="line">return  (WeeklyLog)ois.readObject();</div></pre></td></tr></table></figure></p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>原型模式 <a href="https://blog.csdn.net/lovelion/article/details/7424623" target="_blank" rel="external">https://blog.csdn.net/lovelion/article/details/7424623</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浅克隆&quot;&gt;&lt;a href=&quot;#浅克隆&quot; class=&quot;headerlink&quot; title=&quot;浅克隆&quot;&gt;&lt;/a&gt;浅克隆&lt;/h2&gt;&lt;p&gt;在Java语言中，所有的Java类都继承自java.lang.Object。事实上，Object类提供一个clone()方法，可以将
      
    
    </summary>
    
      <category term="java" scheme="http://www.codr.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.codr.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git升级版本</title>
    <link href="http://www.codr.top/2018/06/%E5%B7%A5%E5%85%B7/git%E5%8D%87%E7%BA%A7%E7%89%88%E6%9C%AC/"/>
    <id>http://www.codr.top/2018/06/工具/git升级版本/</id>
    <published>2018-06-04T10:59:07.000Z</published>
    <updated>2018-09-18T13:32:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用git pull、git push、git clone的时候，会报如下的错误：<br>error: while accessing <a href="https://github.com/Yelp/elastalert.git/info/refs" target="_blank" rel="external">https://github.com/Yelp/elastalert.git/info/refs</a> fatal: HTTP request failed<br>这个一般是由于服务器本身自带的git版本过低造成的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git --version</div><div class="line">git version 1.7.1</div></pre></td></tr></table></figure></p><p>git版本升级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">0）安装依赖软件</div><div class="line">[root@uatjenkins01 ~]# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</div><div class="line">[root@uatjenkins01 ~]# yum install  gcc perl-ExtUtils-MakeMaker</div><div class="line"> </div><div class="line">1）卸载系统自带的底版本git（1.7.1）</div><div class="line">[root@uatjenkins01 ~]# git --version</div><div class="line">git version 1.7.1</div><div class="line">[root@uatjenkins01 ~]# yum remove git</div><div class="line">  </div><div class="line">2）编译安装最新的git版本</div><div class="line">[root@uatjenkins01 ~]# cd /usr/local/src/</div><div class="line">[root@uatjenkins01 src]# wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.17.1.tar.gz</div><div class="line">[root@uatjenkins01 src]# tar -vxf git-2.17.1.tar.xz</div><div class="line">[root@uatjenkins01 src]# cd git-2.17.1</div><div class="line">[root@uatjenkins01 git-2.17.1]# make prefix=/usr/local/git all</div><div class="line">[root@uatjenkins01 git-2.17.1]# make prefix=/usr/local/git install</div><div class="line">[root@uatjenkins01 git-2.17.1]# echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/profile</div><div class="line">[root@uatjenkins01 git-2.17.1]# source /etc/profile</div><div class="line">  </div><div class="line">[root@uatjenkins01 ~]# git --version</div><div class="line">git version 2.17.1</div><div class="line">  </div><div class="line">======================================================================</div><div class="line">如果是非root用户使用git，则需要配置下该用户下的环境变量</div><div class="line">[app@uatjenkins01 ~]$ echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; ~/.bashrc</div><div class="line">[app@uatjenkins01 ~]$ source ~/.bashrc</div><div class="line">[app@uatjenkins01 ~]$ git --version</div><div class="line">git version 2.17.1</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用git pull、git push、git clone的时候，会报如下的错误：&lt;br&gt;error: while accessing &lt;a href=&quot;https://github.com/Yelp/elastalert.git/info/refs&quot; target=&quot;_
      
    
    </summary>
    
      <category term="git" scheme="http://www.codr.top/categories/git/"/>
    
    
      <category term="git" scheme="http://www.codr.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>EFK-日志报警</title>
    <link href="http://www.codr.top/2018/06/ELK/EFK-%E6%97%A5%E5%BF%97%E6%8A%A5%E8%AD%A6/"/>
    <id>http://www.codr.top/2018/06/ELK/EFK-日志报警/</id>
    <published>2018-06-04T09:43:41.000Z</published>
    <updated>2018-09-18T13:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elastalert-安装"><a href="#Elastalert-安装" class="headerlink" title="Elastalert 安装"></a>Elastalert 安装</h2><p>下载 elastalert 源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/Yelp/elastalert.git</div><div class="line">cd elastalert</div><div class="line">python setup.py install</div><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure></p><p>安装完后，会在 /usr/local/bin/ 下生成4个elastalert命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/elastalert </div><div class="line">/usr/local/bin/elastalert-create-index  </div><div class="line">/usr/local/bin/elastalert-rule-from-kibana  </div><div class="line">/usr/local/bin/elastalert-test-rule</div></pre></td></tr></table></figure></p><p>elastalert-create-index 这个命令会在elasticsearch创建索引，这不是必须的步骤，但是强烈建议创建。因为对于，审计，测试很有用，并且重启elastalert不影响计数和发送alert,默认情况下，创建的索引叫 elastalert_status</p><h2 id="Elastalert-配置"><a href="#Elastalert-配置" class="headerlink" title="Elastalert 配置"></a>Elastalert 配置</h2><h2 id="配置文件config-yaml"><a href="#配置文件config-yaml" class="headerlink" title="配置文件config.yaml"></a>配置文件config.yaml</h2><p>/mydata/elk/elastalert/config.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 规则文件夹</div><div class="line">rules_folder: my_rules</div><div class="line"></div><div class="line"># 查询Elasticsearch时间间隔</div><div class="line">run_every:</div><div class="line">  minutes: 1</div><div class="line"></div><div class="line"># ElastAlert缓存结果时间</div><div class="line">buffer_time:</div><div class="line">  minutes: 15</div><div class="line"></div><div class="line"># Elasticsearch hostname</div><div class="line">es_host: 127.0.0.1</div><div class="line">es_port: 9200</div><div class="line"></div><div class="line"># elasticsearch中的索引名</div><div class="line">writeback_index: elastalert_status</div><div class="line"></div><div class="line"># 发送失败重试时间间隔</div><div class="line">alert_time_limit:</div><div class="line">  days: 2</div><div class="line"></div><div class="line"># 邮箱发送配置</div><div class="line">smtp_host: smtp.exmail.qq.com</div><div class="line">smtp_port: 465</div><div class="line">smtp_ssl: true</div><div class="line">smtp_auth_file: /mydata/elk/elastalert/email_auth.yaml</div><div class="line">from_addr: xxx@xxx.cn</div></pre></td></tr></table></figure><h2 id="规则-example-rules"><a href="#规则-example-rules" class="headerlink" title="规则 example_rules"></a>规则 example_rules</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 规则名，需要唯一</div><div class="line">name: pay error frequency rule</div><div class="line"></div><div class="line"># 数据验证方式</div><div class="line">type: frequency</div><div class="line"></div><div class="line"># 从某类索引里读取数据</div><div class="line">index: filebeat-*</div><div class="line"></div><div class="line"># 在时间间隔内匹配多少次触发报警</div><div class="line">num_events: 1</div><div class="line"># 时间间隔</div><div class="line">timeframe:</div><div class="line">  minutes: 1</div><div class="line"></div><div class="line"># ES请求的过滤条件</div><div class="line">filter:</div><div class="line">- query:</div><div class="line">    query_string:</div><div class="line">        query: &apos;source:&quot;/mydata/release/fs-pay/logs/error.log&quot; AND  message:ERROR&apos;</div><div class="line"># 报警渠道</div><div class="line">alert:</div><div class="line">- &quot;email&quot;</div><div class="line">email:</div><div class="line">- &quot;xxxx@xxx.cn&quot;</div></pre></td></tr></table></figure><p>自定义邮件内容可以配置 alert_text和alert_text_args</p><p>控制报警风暴，减少重复告警的频率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 用来区分报警，跟 realert 配合使用，在这里意味着，</div><div class="line"># 5 分钟内如果有重复报警，那么当 name 不同时，会当做不同的报警处理，可以是数组</div><div class="line">query_key:</div><div class="line"> - name</div><div class="line"></div><div class="line"># 5 分钟内相同的报警不会重复发送</div><div class="line">realert:</div><div class="line"> minutes: 5</div><div class="line"></div><div class="line"># 指数级扩大 realert 时间，中间如果有报警，</div><div class="line"># 则按照 5 -&gt; 10 -&gt; 20 -&gt; 40 -&gt; 60 不断增大报警时间到制定的最大时间，</div><div class="line"># 如果之后报警减少，则会慢慢恢复原始 realert 时间</div><div class="line">exponential_realert:</div><div class="line"> hours: 1</div></pre></td></tr></table></figure></p><h3 id="ruletype"><a href="#ruletype" class="headerlink" title="ruletype"></a>ruletype</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">any：只要有匹配就报警；</div><div class="line"></div><div class="line">blacklist：compare_key字段的内容匹配上 blacklist数组里任意内容；</div><div class="line"></div><div class="line">whitelist：compare_key字段的内容一个都没能匹配上whitelist数组里内容；</div><div class="line"></div><div class="line">change：在相同query_key条件下，compare_key字段的内容，在 timeframe范围内 发送变化；</div><div class="line"></div><div class="line">frequency：在相同 query_key条件下，timeframe 范围内有num_events个被过滤出 来的异常；</div><div class="line"></div><div class="line">spike：在相同query_key条件下，前后两个timeframe范围内数据量相差比例超过spike_height。其中可以通过spike_type设置具体涨跌方向是- up,down,both 。还可以通过threshold_ref设置要求上一个周期数据量的下限，threshold_cur设置要求当前周期数据量的下限，如果数据量不到下限，也不触发；</div><div class="line"></div><div class="line">flatline：timeframe 范围内，数据量小于threshold 阈值；</div><div class="line"></div><div class="line">new_term：fields字段新出现之前terms_window_size(默认30天)范围内最多的terms_size (默认50)个结果以外的数据；</div><div class="line"></div><div class="line">cardinality：在相同 query_key条件下，timeframe范围内cardinality_field的值超过 max_cardinality 或者低于min_cardinality</div></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动elastalert服务，监听elasticsearch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python -m elastalert.elastalert --verbose</div><div class="line">python -m elastalert.elastalert --verbose --rule example_rules/example_test.yaml</div><div class="line"></div><div class="line">后台运行</div><div class="line">nohup python -m elastalert.elastalert --verbose  &gt;/dev/null 2&gt;&amp;1 &amp;</div><div class="line">指定配置文件</div><div class="line">nohup python -m elastalert.elastalert --verbose --rule example_rules/example_test.yaml &gt;/dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://elastalert.readthedocs.io/en/latest/" target="_blank" rel="external">https://elastalert.readthedocs.io/en/latest/</a><br><a href="https://www.ctolib.com/docs/sfile/ELKstack-guide-cn/elasticsearch/other/elastalert.html" target="_blank" rel="external">https://www.ctolib.com/docs/sfile/ELKstack-guide-cn/elasticsearch/other/elastalert.html</a><br><a href="https://blog.xizhibei.me/2017/11/19/alerting-with-elastalert/" target="_blank" rel="external">https://blog.xizhibei.me/2017/11/19/alerting-with-elastalert/</a><br><a href="http://www.freebuf.com/articles/web/160254.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/160254.html</a><br><a href="http://www.xiaot123.com/post/elk_filebeat1" target="_blank" rel="external">http://www.xiaot123.com/post/elk_filebeat1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Elastalert-安装&quot;&gt;&lt;a href=&quot;#Elastalert-安装&quot; class=&quot;headerlink&quot; title=&quot;Elastalert 安装&quot;&gt;&lt;/a&gt;Elastalert 安装&lt;/h2&gt;&lt;p&gt;下载 elastalert 源码&lt;br&gt;&lt;figur
      
    
    </summary>
    
      <category term="ELK" scheme="http://www.codr.top/categories/ELK/"/>
    
    
      <category term="日志系统" scheme="http://www.codr.top/tags/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="ELK" scheme="http://www.codr.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot接收时间参数</title>
    <link href="http://www.codr.top/2018/06/spring%E5%AE%B6%E6%97%8F/SpringBoot%E6%8E%A5%E6%94%B6%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0/"/>
    <id>http://www.codr.top/2018/06/spring家族/SpringBoot接收时间参数/</id>
    <published>2018-06-01T03:44:24.000Z</published>
    <updated>2018-09-18T13:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>服务端需要使用实体类属性字段接收时间，java.util.Date类型的属性字段。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>请求数据时间格式为：”yyyy-MM-dd HH:mm:ss” 字符串<br>报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;timestamp&quot;: 1527824946500,</div><div class="line">    &quot;status&quot;: 400,</div><div class="line">    &quot;error&quot;: &quot;Bad Request&quot;,</div><div class="line">    &quot;exception&quot;: &quot;org.springframework.http.converter.HttpMessageNotReadableException&quot;,</div><div class="line">    &quot;message&quot;: &quot;JSON parse error: Can not deserialize value of type java.util.Date from String \&quot;2018-06-01 11:33:55\&quot;: not a valid representation (error: Failed to parse Date value &apos;2018-06-01 11:33:55&apos;: Can not parse date \&quot;2018-06-01 11:33:55\&quot;: while it seems to fit format &apos;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;, parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.Date from String \&quot;2018-06-01 11:33:55\&quot;: not a valid representation (error: Failed to parse Date value &apos;2018-06-01 11:33:55&apos;: Can not parse date \&quot;2018-06-01 11:33:55\&quot;: while it seems to fit format &apos;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;, parsing fails (leniency? null))\n at [Source: java.io.PushbackInputStream@73f25959; line: 1, column: 228] (through reference chain: cn.xxx[\&quot;rightsEndTime\&quot;])&quot;,</div><div class="line">    &quot;path&quot;: &quot;/grouppurchase/commodity/add&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>Springboot使用的默认json解析框架是jackjson框架</li><li>jackjson解析框架在解析实体类里面是date数据类型的数据时的默认格式是：UTC类型，即yyyy-MM-dd’T’HH:mm:ss.SSS 并且默认为+8时区，即时间基础上加8小时</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>实体Date类型的字段上使用@JsonFormat注解格式化日期<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@JsonFormat(locale=&quot;zh&quot;, timezone=&quot;GMT+8&quot;, pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</div></pre></td></tr></table></figure></p><p>取消timestamps形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);</div></pre></td></tr></table></figure></p><p>fastjson解法方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@JsonFormat(shape=JsonFormat.Shape.STRING, pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;服务端需要使用实体类属性字段接收时间，java.util.Date类型的属性字段。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.codr.top/categories/SpringBoot/"/>
    
    
      <category term="spring" scheme="http://www.codr.top/tags/spring/"/>
    
      <category term="后端" scheme="http://www.codr.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="SpringBoot" scheme="http://www.codr.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>java版本升级特性</title>
    <link href="http://www.codr.top/2018/05/Java/java%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://www.codr.top/2018/05/Java/java版本升级特性/</id>
    <published>2018-05-31T06:59:55.000Z</published>
    <updated>2018-10-16T01:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><p>JUG：Java User Groups（Java用户群）<br>JCP：Java Community Process，一个促进Java发展的国际组织，主要负责JSR的制定，OpenJDK的开发。其中JUG属于JCP。<br>EC：Executive Committee，是JCP中的执行委员会，是选举产生的。<br>JEP（JDK Enhancement Proposal，JDK改进提案，JDK增强建议），来源于JCP社区，但不一定被采纳。<br>JSR：Java Specification Requests（Java规范请求），JSR是有状态的，并不是所有的JSR都有效，所以在看JSR时需要先看下状态是否有效。Java的各个版本的语言规范和虚拟机规范都是JSR范畴里的，JSR的生效由Expert Group（专家组）商讨制定并由EC投票确立。JSR的确立是有一个具体流程规范的，不过并不是所有的JSR都会在JDK里实现的。<br>JSR专家组（Expert Group）：从JCP里选出的对应领域有威望的个人（其实背后代表的是所属公司），负责制定和修改JSR。<br>Java语言规范：其实已经包括在JSR里，细分开是因为只是语言层面的，不涉及跨平台的JVM的细节，所以想要详细了解Java语法的可以仔细研读下。<br>JVM规范：这里主要描述虚拟机的实现规范，包括指令集及其作用、虚拟机内存模型、类文件描述、编译、链接、加载、初始化等步聚描述，想要了解虚拟机具体是怎么工作的可以仔细研读下，不过规范不涉及实现，目前虚拟机的实现也有很多种，HotSpot是OpenJDK里的，想要了解实现细节的可以下载HotSpot源码看下。</p><h2 id="Java-11-新特性"><a href="#Java-11-新特性" class="headerlink" title="Java 11 新特性"></a>Java 11 新特性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">官网公开的 17 个 JEP（JDK Enhancement Proposal 特性增强提议）：</div><div class="line">181: Nest-Based Access Control（基于嵌套的访问控制）</div><div class="line">309: Dynamic Class-File Constants（动态的类文件常量）</div><div class="line">315: Improve Aarch64 Intrinsics（改进 Aarch64 Intrinsics）</div><div class="line">318: Epsilon: A No-Op Garbage Collector（Epsilon 垃圾回收器，又被称为&quot;No-Op（无操作）&quot;回收器）</div><div class="line">320: Remove the Java EE and CORBA Modules（移除 Java EE 和 CORBA 模块，JavaFX 也已被移除）</div><div class="line">321: HTTP Client (Standard)</div><div class="line">323: Local-Variable Syntax for Lambda Parameters（用于 Lambda 参数的局部变量语法）</div><div class="line">324: Key Agreement with Curve25519 and Curve448（采用 Curve25519 和 Curve448 算法实现的密钥协议）</div><div class="line">327: Unicode 10</div><div class="line">328: Flight Recorder（飞行记录仪）</div><div class="line">329: ChaCha20 and Poly1305 Cryptographic Algorithms（实现 ChaCha20 和 Poly1305 加密算法）</div><div class="line">330: Launch Single-File Source-Code Programs（启动单个 Java 源代码文件的程序）</div><div class="line">331: Low-Overhead Heap Profiling（低开销的堆分配采样方法）</div><div class="line">332: Transport Layer Security (TLS) 1.3（对 TLS 1.3 的支持）</div><div class="line">333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）</div><div class="line">335: Deprecate the Nashorn JavaScript Engine（弃用 Nashorn JavaScript 引擎）</div><div class="line">336: Deprecate the Pack200 Tools and API（弃用 Pack200 工具及其 API）</div></pre></td></tr></table></figure><h2 id="java-10"><a href="#java-10" class="headerlink" title="java 10"></a>java 10</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">286：本地变量类型推断</div><div class="line">296：统一JDK仓库</div><div class="line">304：垃圾回收器接口</div><div class="line">307：G1的并行Full GC</div><div class="line">310：应用程序类数据共享</div><div class="line">312：ThreadLocal握手机制</div></pre></td></tr></table></figure><h2 id="java-9"><a href="#java-9" class="headerlink" title="java 9"></a>java 9</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Java 平台级模块系统</div><div class="line">Linking</div><div class="line">JShell : 交互式 Java REPL</div><div class="line">改进的 Javadoc</div><div class="line">集合工厂方法</div><div class="line">改进的 Stream API</div><div class="line">私有接口方法</div><div class="line">HTTP/2</div><div class="line">多版本兼容 JAR</div></pre></td></tr></table></figure><p>前辍说明：U:修改，A:新增，D:废弃，M:模块化，S:安全<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">U  102: Process API Updates</div><div class="line">A  110: HTTP 2 Client</div><div class="line">U  143: Improve Contended Locking</div><div class="line">U  158: Unified JVM Logging</div><div class="line">U  165: Compiler Control</div><div class="line">U  193: Variable Handles</div><div class="line">U  197: Segmented Code Cache</div><div class="line">U  199: Smart Java Compilation, Phase Two</div><div class="line">AM 200: The Modular JDK</div><div class="line">AM 201: Modular Source Code</div><div class="line">A  211: Elide Deprecation Warnings on Import Statements</div><div class="line">A  212: Resolve Lint and Doclint Warnings</div><div class="line">U  213: Milling Project Coin</div><div class="line">D  214: Remove GC Combinations Deprecated in JDK 8</div><div class="line">A  215: Tiered Attribution for javac</div><div class="line">U  216: Process Import Statements Correctly</div><div class="line">U  217: Annotations Pipeline 2.0</div><div class="line">A  219: Datagram Transport Layer Security (DTLS)</div><div class="line">AM 220: Modular Run-Time Images</div><div class="line">A  221: Simplified Doclet API</div><div class="line">A  222: jshell: The Java Shell (Read-Eval-Print Loop)</div><div class="line">A  223: New Version-String Scheme</div><div class="line">U  224: HTML5 Javadoc</div><div class="line">A  225: Javadoc Search</div><div class="line">A  226: UTF-8 Property Files</div><div class="line">A  227: Unicode 7.0</div><div class="line">A  228: Add More Diagnostic Commands</div><div class="line">US 229: Create PKCS12 Keystores by Default</div><div class="line">D  231: Remove Launch-Time JRE Version Selection</div><div class="line">U  232: Improve Secure Application Performance</div><div class="line">A  233: Generate Run-Time Compiler Tests Automatically</div><div class="line">A  235: Test Class-File Attributes Generated by javac</div><div class="line">A  236: Parser API for Nashorn</div><div class="line">A  237: Linux/AArch64 Port</div><div class="line">U  238: Multi-Release JAR Files</div><div class="line">D  240: Remove the JVM TI hprof Agent</div><div class="line">D  241: Remove the jhat Tool</div><div class="line">A  243: Java-Level JVM Compiler Interface</div><div class="line">US 244: TLS Application-Layer Protocol Negotiation Extension</div><div class="line">U  245: Validate JVM Command-Line Flag Arguments</div><div class="line">US 246: Leverage CPU Instructions for GHASH and RSA</div><div class="line">U  247: Compile for Older Platform Versions</div><div class="line">U  248: Make G1 the Default Garbage Collector</div><div class="line">AS 249: OCSP Stapling for TLS</div><div class="line">U  250: Store Interned Strings in CDS Archives</div><div class="line">A  251: Multi-Resolution Images</div><div class="line">U  252: Use CLDR Locale Data by Default</div><div class="line">A  253: Prepare JavaFX UI Controls &amp; CSS APIs for Modularization</div><div class="line">U  254: Compact Strings</div><div class="line">U  255: Merge Selected Xerces 2.11.0 Updates into JAXP</div><div class="line">U  256: BeanInfo Annotations</div><div class="line">U  257: Update JavaFX/Media to Newer Version of GStreamer</div><div class="line">U  258: HarfBuzz Font-Layout Engine</div><div class="line">A  259: Stack-Walking API</div><div class="line">UM 260: Encapsulate Most Internal APIs</div><div class="line">AM 261: Module System</div><div class="line">U  262: TIFF Image I/O</div><div class="line">A  263: HiDPI Graphics on Windows and Linux</div><div class="line">A  264: Platform Logging API and Service</div><div class="line">U  265: Marlin Graphics Renderer</div><div class="line">U  266: More Concurrency Updates</div><div class="line">A  267: Unicode 8.0</div><div class="line">A  268: XML Catalogs</div><div class="line">A  269: Convenience Factory Methods for Collections</div><div class="line">U  270: Reserved Stack Areas for Critical Sections</div><div class="line">U  271: Unified GC Logging</div><div class="line">A  272: Platform-Specific Desktop Features</div><div class="line">A  273: DRBG-Based SecureRandom Implementations</div><div class="line">U  274: Enhanced Method Handles</div><div class="line">AM 275: Modular Java Application Packaging</div><div class="line">AM 276: Dynamic Linking of Language-Defined Object Models</div><div class="line">U  277: Enhanced Deprecation</div><div class="line">A  278: Additional Tests for Humongous Objects in G1</div><div class="line">U  279: Improve Test-Failure Troubleshooting</div><div class="line">U  280: Indify String Concatenation</div><div class="line">A  281: HotSpot C++ Unit-Test Framework</div><div class="line">AM 282: jlink: The Java Linker</div><div class="line">A  283: Enable GTK 3 on Linux</div><div class="line">U  284: New HotSpot Build System</div><div class="line">A  285: Spin-Wait Hints</div><div class="line">AS 287: SHA-3 Hash Algorithms</div><div class="line">DS 288: Disable SHA-1 Certificates</div><div class="line">D  289: Deprecate the Applet API</div><div class="line">AS 290: Filter Incoming Serialization Data</div><div class="line">D  291: Deprecate the Concurrent Mark Sweep (CMS) Garbage Collector</div><div class="line">A  292: Implement Selected ECMAScript 6 Features in Nashorn</div><div class="line">A  294: Linux/s390x Port</div><div class="line">A  295: Ahead-of-Time Compilation</div><div class="line">U  297: Unified arm32/arm64 Port</div><div class="line">D  298: Remove Demos and Samples</div><div class="line">U  299: Reorganize Documentation</div></pre></td></tr></table></figure></p><h2 id="java8"><a href="#java8" class="headerlink" title="java8"></a>java8</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">允许在接口中有默认方法实现</div><div class="line">Lambda表达式</div><div class="line">函数式接口</div><div class="line">方法和构造函数引用</div><div class="line">Lambda的范围</div><div class="line">内置函数式接口</div><div class="line">Streams</div><div class="line">Parallel Streams</div><div class="line">Map</div><div class="line">时间日期API</div><div class="line">Annotations</div></pre></td></tr></table></figure><h2 id="java7"><a href="#java7" class="headerlink" title="java7"></a>java7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">switch语句块中允许以字符串作为分支条件；</div><div class="line">在创建泛型对象时应用类型推断；</div><div class="line">在一个语句块中捕获多种异常；</div><div class="line">支持动态语言；</div><div class="line">支持try-with-resources；</div><div class="line">引入Java NIO.2开发包；</div><div class="line">数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；</div><div class="line">try-with-resources(新语法)。定义在try-with-resources 声明里，无论try语句正常还是异常的结束，</div><div class="line">   它都会自动的关掉</div></pre></td></tr></table></figure><h2 id="java6"><a href="#java6" class="headerlink" title="java6"></a>java6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">支持脚本语言；</div><div class="line">引入JDBC 4.0 API；</div><div class="line">引入Java Compiler API；</div><div class="line">可插拔注解；</div><div class="line">增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；</div><div class="line">继承Web Services；</div><div class="line">做了很多优化。</div></pre></td></tr></table></figure><h2 id="java5"><a href="#java5" class="headerlink" title="java5"></a>java5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">引入泛型；</div><div class="line">增强循环，可以使用迭代方式；</div><div class="line">自动装箱与自动拆箱；</div><div class="line">类型安全的枚举；</div><div class="line">可变参数；</div><div class="line">静态引入；</div><div class="line">元数据（注解）；</div><div class="line">引入Instrumentation。</div></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://juejin.im/entry/5aa234b35188255570059b78" target="_blank" rel="external">https://juejin.im/entry/5aa234b35188255570059b78</a><br><a href="https://segmentfault.com/a/1190000004417830" target="_blank" rel="external">https://segmentfault.com/a/1190000004417830</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关名词&quot;&gt;&lt;a href=&quot;#相关名词&quot; class=&quot;headerlink&quot; title=&quot;相关名词&quot;&gt;&lt;/a&gt;相关名词&lt;/h2&gt;&lt;p&gt;JUG：Java User Groups（Java用户群）&lt;br&gt;JCP：Java Community Process，一个
      
    
    </summary>
    
      <category term="java" scheme="http://www.codr.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.codr.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>quartz和数据库断连接的解决办法</title>
    <link href="http://www.codr.top/2018/05/quartz/quartz%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://www.codr.top/2018/05/quartz/quartz和数据库断连接的解决办法/</id>
    <published>2018-05-31T03:57:41.000Z</published>
    <updated>2018-09-18T13:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>quartz连接数据库超时会出现以下异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed.</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</div><div class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</div><div class="line">        at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)</div><div class="line">        at com.mysql.jdbc.Util.getInstance(Util.java:387)</div><div class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)</div><div class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)</div><div class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)</div><div class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)</div><div class="line">        at com.mysql.jdbc.ConnectionImpl.throwConnectionClosedException(ConnectionImpl.java:1246)</div><div class="line">        at com.mysql.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:1241)</div><div class="line">        at com.mysql.jdbc.ConnectionImpl.rollback(ConnectionImpl.java:4564)</div><div class="line">        at com.mchange.v2.c3p0.impl.NewProxyConnection.rollback(NewProxyConnection.java:855)</div><div class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">        at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">        at org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler.invoke(AttributeRestoringConnectionInvocationHandler.java:73)</div><div class="line">        at com.sun.proxy.$Proxy120.rollback(Unknown Source)</div><div class="line">        at org.quartz.impl.jdbcjobstore.JobStoreSupport.rollbackConnection(JobStoreSupport.java:3666)</div><div class="line">        at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3825)</div><div class="line">        at org.quartz.impl.jdbcjobstore.JobStoreSupport.acquireNextTriggers(JobStoreSupport.java:2756)</div><div class="line">        at org.quartz.core.QuartzSchedulerThread.run(QuartzSchedulerThread.java:272)</div><div class="line">Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: The last packet successfully received from the server was 50,340,121 milliseconds ago.  The last packet sent successfully to the server was 50,340,121 milliseconds ago. is longer than the server configured value of &apos;wait_timeout&apos;. You should consider either expiring and/or testing connection v</div><div class="line">alidity before use in your application, increasing the server configured values for client timeouts, or using the Connector/J connection property &apos;autoReconnect=true&apos; to avoid this problem.</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</div><div class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</div><div class="line">        at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)</div><div class="line">        at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:988)</div><div class="line">        at com.mysql.jdbc.MysqlIO.send(MysqlIO.java:3739)</div><div class="line">        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2508)</div><div class="line">        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2673)</div><div class="line">        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2545)</div><div class="line">        at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4842)</div><div class="line">        at com.mchange.v2.c3p0.impl.NewProxyConnection.setAutoCommit(NewProxyConnection.java:881)</div><div class="line">        at org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler.setAutoCommit(AttributeRestoringConnectionInvocationHandler.java:98)</div><div class="line">        at org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler.invoke(AttributeRestoringConnectionInvocationHandler.java:66)</div></pre></td></tr></table></figure></p><p>解法方法：<br>在使用链接时先检查是否有效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prop.put(&quot;org.quartz.dataSource.quartz.idleConnectionValidationSeconds&quot;, 60);</div><div class="line">prop.put(&quot;org.quartz.dataSource.quartz.validateOnCheckout&quot;, true);</div><div class="line">prop.put(&quot;org.quartz.dataSource.quartz.validationQuery&quot;, &quot;select 1&quot;);</div></pre></td></tr></table></figure></p><p>配置说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">org.quartz.dataSource.NAME.driver</div><div class="line">必须是数据库的JDBC驱动程序的java类名称。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.URL</div><div class="line">连接到数据库的连接URL（主机，端口等）。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.user</div><div class="line">连接到数据库时要使用的用户名。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.password</div><div class="line">连接到数据库时使用的密码。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.maxConnections</div><div class="line">DataSource可以在其连接池中创建的最大连接数。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.validationQuery</div><div class="line">是可选的SQL查询字符串，DataSource可用于检测和替换失败/损坏的连接。例如，oracle用户可能会选择“从user_tables中选择table_name” - 这是一个不应该失败的查询 - 除非连接实际上是坏的。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.idleConnectionValidationSeconds</div><div class="line">空闲连接测试之间的秒数 - 仅在设置验证查询属性时启用。默认值为50秒。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.validateOnCheckout</div><div class="line">每次从池中检索连接时，是否应该执行数据库sql查询来验证连接，以确保它仍然有效。如果为假，则在办理登机手续时将进行验证。默认值为false。</div><div class="line"></div><div class="line">org.quartz.dataSource.NAME.discardIdleConnectionsSeconds</div><div class="line">它们在空闲之后放弃连接几秒钟。0禁用该功能。默认值为0。</div></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.w3cschool.cn/quartz_doc/quartz_doc-d8pn2do9.html" target="_blank" rel="external">https://www.w3cschool.cn/quartz_doc/quartz_doc-d8pn2do9.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;quartz连接数据库超时会出现以下异常&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="quartz" scheme="http://www.codr.top/categories/quartz/"/>
    
    
      <category term="后端" scheme="http://www.codr.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="quartz" scheme="http://www.codr.top/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>python笔记</title>
    <link href="http://www.codr.top/2018/05/python/python%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.codr.top/2018/05/python/python笔记/</id>
    <published>2018-05-23T23:52:07.000Z</published>
    <updated>2018-09-18T13:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python笔记"><a href="#python笔记" class="headerlink" title="python笔记"></a>python笔记</h1><h2 id="python之蝉"><a href="#python之蝉" class="headerlink" title="python之蝉"></a>python之蝉</h2><p>解释器中输入import this<br>Now is better than never.</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>大写name.upper()<br>小写name.lower()<br>首字母大写name.title()<br>使用+拼接字符串<br>去掉空格strip()，lstrip()，rstrip()<br>将非字符串值表示为字符串str()</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>在python2和python3中除的结果不一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3/2=1   #python2</div><div class="line">3/2=1.5 #python3</div></pre></td></tr></table></figure></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>索引为负数时列表倒数，索引-1返回最后一个元素<br>追加元素list.append(xx)<br>插入元素list.instert(2,xx)<br>删除元素 del list(2)<br>弹出元素 list.pop(),list.pop(2)<br>根据值删除 list.pop(‘lisi’)<br>排序 list.sort()<br>临时排序 list.sorted()<br>反转顺序 list.reverse()<br>长度 list.len()<br>生成数值数组函数range()<br>列表解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">squares = [value** 2 for value in range( 1,11)]</div></pre></td></tr></table></figure></p><p>遍历<br>for  item in  list:</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>列表的部分元素<br>切片复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">my_foods = [&apos; pizza&apos;, &apos;falafel&apos;, &apos;carrot cake&apos;] </div><div class="line">friend_foods = my_foods[:]</div></pre></td></tr></table></figure></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。元组不可以改变元素，但是可以重新定义元组。<br>定义元组使用圆括号</p><h2 id="for-遍历"><a href="#for-遍历" class="headerlink" title="for 遍历"></a>for 遍历</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for  item in  list:</div><div class="line">    </div><div class="line">for k, v in map.items():</div></pre></td></tr></table></figure><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if true :</div><div class="line">    ...</div><div class="line">elif:</div><div class="line">    ...</div><div class="line">else:</div><div class="line">    ...</div></pre></td></tr></table></figure><p>检查多个条件使用and，or<br>检测元素是否在列表中 if item in list: ,if item not in list:</p><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>在列表之间移动元素 while list:<br>判断列表包含某个元素 while ‘aa’ in list:</p><h2 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h2><p>python2 raw_input()<br>python3 input()</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一系列键值对，用放在花括号{}中的一系列键—值对表示<br>删除元素 del userMap[‘name’]<br>遍历字典键值 for k, v in map.items():<br>遍历字典中所有建 for name in favorite_languages.keys():<br>遍历字典中所有的值 for language in favorite_languages.values():</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数使用 def<br>实参和形参<br>位置实参，关键字实参，默认值<br>在函数中对这个列表所做的任何修改都是永久性的<br>禁止函数修改列表，将列表的副本传递给函数 list[:]，用切片创建副本<br>传递任意数量的实参，形参名<em>toppings中的星号让python创建一个名为toppings的空元组，将收到的值都封装到这个元组中。形参*</em>user_info中的两个星号让Python创建一个名为user_info的空字典，并将收到的所有名称—值对都封装到这个字典中。</p><h2 id="导入函数"><a href="#导入函数" class="headerlink" title="导入函数"></a>导入函数</h2><p>导入整个模块 import module_name<br>导入模块特定函数 from module_name import function_name1,function_name2<br>使用as给函数指定别名 from module_name import function_name1 as name1<br>使用as给模块指定别名 import module_name as m1<br>导入模块全部函数 from module_name import *</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>关键字 class 定义类<br>创建类dog.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Dog(): </div><div class="line">    &quot;&quot;&quot; 一 次 模 拟 小 狗 的 简 单 尝 试&quot;&quot;&quot; </div><div class="line">    def __init__( self, name, age): </div><div class="line">        &quot;&quot;&quot; 初 始 化 属 性 name 和 age&quot;&quot;&quot; </div><div class="line">        self.name = name self.age = age</div><div class="line"></div><div class="line">    def sit( self): </div><div class="line">        &quot;&quot;&quot; 模 拟 小 狗 被 命 令 时 蹲 下&quot;&quot;&quot; </div><div class="line">        print( self.name.title() + &quot; is now sitting.&quot;) </div><div class="line"></div><div class="line">    def roll_over( self): </div><div class="line">        &quot;&quot;&quot; 模 拟 小 狗 被 命 令 时 打 滚&quot;&quot;&quot; </div><div class="line">        print( self.name.title() + &quot; rolled over!&quot;)</div></pre></td></tr></table></figure></p><p>方法<strong>init</strong>()，创建实例时会自动运行，这个方法的定义中，形参self必不可少，还必须位于其他形参的前面。创建实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。以self为前缀的变量都可供类中的所有方法使用</p><p>创建类实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_dog=Dog(&apos;wille&apos;,6)</div></pre></td></tr></table></figure></p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>一个类继承另外一个类时，它将自动获得另一个类的所有属性和方法。<br>创建子类时，父类必须包含在当前文件中，且位于子类前面。定义子类时，必须在括号内指定父类的名称。</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with open(&apos;pi_digits.txt&apos;) as file_obj:</div><div class="line">    contents=file_obj.read()</div></pre></td></tr></table></figure><p>with可以妥善管理打开和关闭</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">&lt;语句&gt;        #运行别的代码</div><div class="line">except &lt;名字&gt;：</div><div class="line">&lt;语句&gt;        #如果在try部份引发了&apos;name&apos;异常</div><div class="line">except &lt;名字&gt;，&lt;数据&gt;:</div><div class="line">&lt;语句&gt;        #如果引发了&apos;name&apos;异常，获得附加的数据</div><div class="line">else:</div><div class="line">&lt;语句&gt;        #如果没有异常发生</div></pre></td></tr></table></figure><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>json.dump(),json.load()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">numbers =[2,3,5,7]</div><div class="line">filename=&apos;jsondump.txt&apos;</div><div class="line">with open(filename,&apos;w&apos;) as file_obj:</div><div class="line">    json.dump(numbers,file_obj)</div><div class="line"></div><div class="line">filename=&apos;jsondump.txt&apos;</div><div class="line">with open(filename,&apos;r&apos;) as file_obj:</div><div class="line">    numbers=json.load(numbers,file_obj)</div><div class="line">print(numbers)</div></pre></td></tr></table></figure></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import unittest</div><div class="line">class TestDict(unittest.TestCase):</div><div class="line">    def test_init(self):</div><div class="line">        d = Dict(a=1, b=&apos;test&apos;)</div><div class="line">        self.assertEqual(d.a, 1)</div><div class="line">        self.assertEqual(d.b, &apos;test&apos;)</div><div class="line">        self.assertTrue(isinstance(d, dict))</div></pre></td></tr></table></figure><h2 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h2><p>linux安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">安装 pygame</div><div class="line">pip install pygame</div><div class="line">hg clone https://bitbucket.org/pygame/pygame</div><div class="line">python3 setup.py build</div><div class="line">sudo python3 setup.py install</div></pre></td></tr></table></figure></p><p>mac安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install hd sdl sdl_image sdl_ttf</div><div class="line">brew install sdl_mixer  portmidi  # 声音</div><div class="line"># pip3 install hg+http://bitbucket.org/pygame/pygame</div><div class="line">pip3 install pygame</div></pre></td></tr></table></figure></p><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><p>使用pydoc查看<br>pydoc keyword<br>pydoc3 keyword</p><p>查询模块的使用方法</p><ol><li>命令模式输入help()，然后输入关键字</li><li>命令模式输入help(str),help(str.split)<br>quit退出<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Help on class str in module builtins:</div><div class="line"></div><div class="line">class str(object)</div><div class="line"> |  str(object=&apos;&apos;) -&gt; str</div><div class="line"> |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</div><div class="line"> |</div><div class="line"> |  Create a new string object from the given object. If encoding or</div><div class="line"> |  errors is specified, then the object must expose a data buffer</div><div class="line"> |  that will be decoded using the given encoding and error handler.</div><div class="line"> |  Otherwise, returns the result of object.__str__() (if defined)</div><div class="line"> |  or repr(object).</div><div class="line"> |  encoding defaults to sys.getdefaultencoding().</div><div class="line"> |  errors defaults to &apos;strict&apos;.</div><div class="line"> |</div><div class="line"> |  Methods defined here:</div><div class="line"> |</div><div class="line"> |  __add__(self, value, /)</div><div class="line"> ... ...</div></pre></td></tr></table></figure></li></ol><p>查看模块下所有函数dir(module_name)，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; dir(str)</div><div class="line">[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__contains__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getitem__&apos;, &apos;__getnewargs__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mod__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rmod__&apos;, &apos;__rmul__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;capitalize&apos;, &apos;casefold&apos;, &apos;center&apos;, &apos;count&apos;, &apos;encode&apos;, &apos;endswith&apos;, &apos;expandtabs&apos;, &apos;find&apos;, &apos;format&apos;, &apos;format_map&apos;, &apos;index&apos;, &apos;isalnum&apos;, &apos;isalpha&apos;, &apos;isdecimal&apos;, &apos;isdigit&apos;, &apos;isidentifier&apos;, &apos;islower&apos;, &apos;isnumeric&apos;, &apos;isprintable&apos;, &apos;isspace&apos;, &apos;istitle&apos;, &apos;isupper&apos;, &apos;join&apos;, &apos;ljust&apos;, &apos;lower&apos;, &apos;lstrip&apos;, &apos;maketrans&apos;, &apos;partition&apos;, &apos;replace&apos;, &apos;rfind&apos;, &apos;rindex&apos;, &apos;rjust&apos;, &apos;rpartition&apos;, &apos;rsplit&apos;, &apos;rstrip&apos;, &apos;split&apos;, &apos;splitlines&apos;, &apos;startswith&apos;, &apos;strip&apos;, &apos;swapcase&apos;, &apos;title&apos;, &apos;translate&apos;, &apos;upper&apos;, &apos;zfill&apos;]</div></pre></td></tr></table></figure></p><p>查看对象某个属性的帮助文档，如要查看str的split属性，可以用<strong>doc</strong>，print(str.split.<strong>doc</strong>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(str.split.__doc__)</div><div class="line">S.split(sep=None, maxsplit=-1) -&gt; list of strings</div><div class="line"></div><div class="line">Return a list of the words in S, using sep as the</div><div class="line">delimiter string.  If maxsplit is given, at most maxsplit</div><div class="line">splits are done. If sep is not specified or is None, any</div><div class="line">whitespace string is a separator and empty strings are</div><div class="line">removed from the result.</div></pre></td></tr></table></figure></p><h2 id="分界符"><a href="#分界符" class="headerlink" title="分界符"></a>分界符</h2><p>python的分界符是冒号和缩进</p><p>一切都是对象</p><p>异常</p><h2 id="name"><a href="#name" class="headerlink" title="name"></a><strong>name</strong></h2><p>如果导入一个模块，那么这个模块的<strong>name</strong>就是这个模块的文件名，如果直接运行这个模块，那么<strong>name</strong>就是<strong>main</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python笔记&quot;&gt;&lt;a href=&quot;#python笔记&quot; class=&quot;headerlink&quot; title=&quot;python笔记&quot;&gt;&lt;/a&gt;python笔记&lt;/h1&gt;&lt;h2 id=&quot;python之蝉&quot;&gt;&lt;a href=&quot;#python之蝉&quot; class=&quot;head
      
    
    </summary>
    
      <category term="python" scheme="http://www.codr.top/categories/python/"/>
    
    
      <category term="python" scheme="http://www.codr.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>vim使用（2）编辑</title>
    <link href="http://www.codr.top/2018/05/vim/vim%E4%BD%BF%E7%94%A8%EF%BC%882%EF%BC%89%E7%BC%96%E8%BE%91/"/>
    <id>http://www.codr.top/2018/05/vim/vim使用（2）编辑/</id>
    <published>2018-05-23T15:44:13.000Z</published>
    <updated>2018-05-31T04:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><ol><li><p>创建窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">水平分割窗口</div><div class="line">:split             当前窗口一分为二，两个窗口显示相同内容。  </div><div class="line">:10split           新窗口的高度10行</div><div class="line">:split otherfile   新窗口中打开otherfile   </div><div class="line">:new               功能和split一样  </div><div class="line">:sp                split的缩写形式  </div><div class="line">ctrl+w+s           分割窗口的快捷方式</div><div class="line"></div><div class="line">垂直分割窗口</div><div class="line">:vsplit 以上所有命令都适用于打开垂直分割窗口，只要在前面加v(vetical)</div></pre></td></tr></table></figure></li><li><p>关闭窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">q  或 close   #关闭当前窗口</div><div class="line"> only      #保留当前窗口，关闭其它所有窗口</div><div class="line"> qall(qa)      #退出所有窗口</div><div class="line"> wall      #保存所有窗口</div></pre></td></tr></table></figure></li><li><p>窗口切换<br>:ctrl+w+j/k，通过j/k可以上下切换，或者:ctrl+w加上下左右键，还可以通过快速双击ctrl+w依次切换窗口。</p></li><li><p>窗口大小调整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">纵向调整</div><div class="line">:ctrl+w + 纵向扩大（行数增加）</div><div class="line">:ctrl+w - 纵向缩小 （行数减少）</div><div class="line">:res(ize) num  例如：:res 5，显示行数调整为5行</div><div class="line">:res(ize)+num 把当前窗口高度增加num行</div><div class="line">:res(ize)-num 把当前窗口高度减少num行</div><div class="line">横向调整</div><div class="line">:vertical res(ize) num 指定当前窗口为num列</div><div class="line">:vertical res(ize)+num 把当前窗口增加num列</div><div class="line">:vertical res(ize)-num 把当前窗口减少num列</div></pre></td></tr></table></figure></li><li><p>窗口重命名<br>:f file</p></li><li><p>文件浏览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:Ex 开启目录浏览器，可以浏览当前目录下的所有文件，并可以选择</div><div class="line">:Sex 水平分割当前窗口，并在一个窗口中开启目录浏览器</div><div class="line">:ls 显示当前buffer情况</div></pre></td></tr></table></figure></li><li><p>vi与shell切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:shell 可以在不关闭vi的情况下切换到shell命令行</div><div class="line">:exit 从shell回到vi</div></pre></td></tr></table></figure></li></ol><h2 id="页签"><a href="#页签" class="headerlink" title="页签"></a>页签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:tabnew [++opt选项] ［＋cmd］ 文件            建立对指定文件新的tabta</div><div class="line">:tab &lt;文件&gt;  新页签打开指定文件</div><div class="line">:tabc       关闭当前的tab</div><div class="line">:tabo       关闭所有其他的tab</div><div class="line">:tabs       查看所有打开的tab</div><div class="line">:tabp      前一个</div><div class="line">:tabn      后一个</div><div class="line">标准模式下：</div><div class="line">gt , gT 可以直接在tab之间切换。</div><div class="line">ngt 切换到指定的窗口。</div><div class="line">更多可以查看帮助 :help table ， help -p</div></pre></td></tr></table></figure><h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><p>vim 环境下，在命令模式中输入下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:!python %</div></pre></td></tr></table></figure></p><h2 id="NERDTree命令"><a href="#NERDTree命令" class="headerlink" title="NERDTree命令"></a>NERDTree命令</h2><p>安装<br>git clone <a href="https://github.com/scrooloose/nerdtree.git" target="_blank" rel="external">https://github.com/scrooloose/nerdtree.git</a> ~/.vim/bundle</p><p>:h NERDTree 查看帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">?                         查看所有命令</div><div class="line"></div><div class="line">窗口切换</div><div class="line">ctrl + w + h              光标移动到左侧树形目录</div><div class="line">ctrl + w + l              光标移动到右侧文件显示窗口</div><div class="line">ctrl + w + w              光标自动在左右侧窗口切换</div><div class="line">ctrl + w + r              移动当前窗口的布局位置</div><div class="line"></div><div class="line">打开文件</div><div class="line">o                         在已有窗口中打开文件、目录或书签，并跳到该窗口</div><div class="line">go                        在已有窗口 中打开文件、目录或书签，但不跳到该窗口</div><div class="line">t                         在新 Tab 中打开选中文件/书签，并跳到新 Tab</div><div class="line">T                         在新 Tab 中打开选中文件/书签，但不跳到新 Tab</div><div class="line">i                         split 一个新窗口打开选中文件，并跳到该窗口</div><div class="line">gi                        split 一个新窗口打开选中文件，但不跳到该窗口</div><div class="line">s                         vsplit 一个新窗口打开选中文件，并跳到该窗口</div><div class="line">gs                        vsplit 一个新 窗口打开选中文件，但不跳到该窗口</div><div class="line">!                         执行当前文件</div><div class="line">O                         递归打开选中 结点下的所有目录</div><div class="line">x                         合拢选中结点的父目录</div><div class="line"></div><div class="line">D                         删除当前书签</div><div class="line"></div><div class="line">P                         跳到根结点</div><div class="line">p                         跳到父结点</div><div class="line">K                         跳到当前目录下同级的第一个结点</div><div class="line">J                         跳到当前目录下同级的最后一个结点</div><div class="line">k                         跳到当前目录下同级的前一个结点</div><div class="line">j                         跳到当前目录下同级的后一个结点</div><div class="line"></div><div class="line">C                         将选中目录或选中文件的父目录设为根结点</div><div class="line">u                         将当前根结点的父目录设为根目录，并变成合拢原根结点</div><div class="line">U                         将当前根结点的父目录设为根目录，但保持展开原根结点</div><div class="line">r                         递归刷新选中目录</div><div class="line">R                         递归刷新根结点</div><div class="line">m                         显示文件系统菜单</div><div class="line">cd                        将 CWD 设为选中目录</div><div class="line"></div><div class="line">I                         切换是否显示隐藏文件</div><div class="line">f                         切换是否使用文件过滤器</div><div class="line">F                         切换是否显示文件</div><div class="line">B                         切换是否显示书签</div><div class="line"></div><div class="line">A                         全屏显示开关</div><div class="line">q                         关闭 NerdTree 窗口</div><div class="line">:NERDTreeToggle           打开 NerdTree 窗口</div></pre></td></tr></table></figure><h2 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&quot; *********************************************</div><div class="line">&quot; Vbundle插件管理</div><div class="line">&quot; *********************************************</div><div class="line">set nocompatible              &quot; required</div><div class="line">filetype off                  &quot; required</div><div class="line"></div><div class="line">&quot; set the runtime path to include Vundle and initialize</div><div class="line">set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle#begin()</div><div class="line"></div><div class="line">&quot; alternatively, pass a path where Vundle should install plugins</div><div class="line">&quot;call vundle#begin(&apos;~/some/path/here&apos;)</div><div class="line"></div><div class="line">&quot; let Vundle manage Vundle, required</div><div class="line">Plugin &apos;gmarik/Vundle.vim&apos;</div><div class="line">Plugin &apos;scrooloose/nerdtree&apos;</div><div class="line">Plugin &apos;majutsushi/tagbar&apos;</div><div class="line">Plugin &apos;vim-scripts/indentpython.vim&apos;</div><div class="line"></div><div class="line"></div><div class="line">&quot; Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)</div><div class="line">&quot; All of your Plugins must be added before the following line</div><div class="line">call vundle#end()            &quot; required</div><div class="line">filetype plugin indent on    &quot; required</div><div class="line"></div><div class="line">&quot; *********************************************</div><div class="line">&quot; 分割布局相关</div><div class="line">&quot; *********************************************</div><div class="line">set splitbelow</div><div class="line">set splitright</div><div class="line">&quot;快捷键，ctrl+l切换到左边布局，ctrl+h切换到右边布局</div><div class="line">&quot;ctrl+k切换到上面布局，ctrl+j切换到下面布局</div><div class="line">nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;</div><div class="line">nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;</div><div class="line">nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;</div><div class="line">nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;</div><div class="line"></div><div class="line">&quot; 开启代码折叠功能</div><div class="line">&quot; 根据当前代码行的缩进来进行代码折叠</div><div class="line">set foldmethod=indent</div><div class="line">set foldlevel=99</div><div class="line"></div><div class="line">&quot; *********************************************</div><div class="line">&quot; NERD插件属性</div><div class="line">&quot; *********************************************</div><div class="line">au vimenter * NERDTree      &quot; 开启vim的时候默认开启NERDTree</div><div class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;    &quot; 设置F2为开启NERDTree的快捷键</div><div class="line"></div><div class="line"></div><div class="line">&quot; tagbar  启动时自动focus</div><div class="line">let g:tagbar_auto_faocus =1</div><div class="line">&quot; 启动指定文件时自动开启tagbar</div><div class="line">autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()</div><div class="line"></div><div class="line">&quot; *********************************************</div><div class="line">&quot; python代码风格PEP8</div><div class="line">&quot; *********************************************</div><div class="line">au BufNewFile,BufRead *.py set tabstop=4 |set softtabstop=4|set shiftwidth=4|set textwidth=79|set expandtab|set autoindent|set fileformat=unix</div><div class="line">au BufNewFile,BufRead *.js, *.html, *.css set tabstop=2|set softtabstop=2|set shiftwidth=2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;窗口&quot;&gt;&lt;a href=&quot;#窗口&quot; class=&quot;headerlink&quot; title=&quot;窗口&quot;&gt;&lt;/a&gt;窗口&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建窗口&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="vim" scheme="http://www.codr.top/categories/vim/"/>
    
    
      <category term="Linux" scheme="http://www.codr.top/tags/Linux/"/>
    
      <category term="vim" scheme="http://www.codr.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>python中venv，pyvenv，pyenv，virtualenv，virtualenvwrapper，pipenv等有什么区别</title>
    <link href="http://www.codr.top/2018/05/python/python%E4%B8%ADvenv%EF%BC%8Cpyvenv%EF%BC%8Cpyenv%EF%BC%8Cvirtualenv%EF%BC%8Cvirtualenvwrapper%EF%BC%8Cpipenv%E7%AD%89%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.codr.top/2018/05/python/python中venv，pyvenv，pyenv，virtualenv，virtualenvwrapper，pipenv等有什么区别/</id>
    <published>2018-05-22T13:50:45.000Z</published>
    <updated>2018-05-31T04:24:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PyPI软件包不在标准库中："><a href="#PyPI软件包不在标准库中：" class="headerlink" title="PyPI软件包不在标准库中："></a>PyPI软件包不在标准库中：</h2><ul><li>virtualenv是一个非常受欢迎的工具，为Python库创建了孤立的Python环境。 如果您不熟悉此工具，我强烈建议您学习它，因为它是非常有用的工具，我将在此答案的其余部分进行比较。</li></ul><p>它通过在目录（例如： env/ ）中安装一堆文件，然后修改PATH环境变量以将其前缀到自定义bin目录（例如： env/bin/ ）。 python或python3二进制文件的完整副本放置在此目录中，但Python被编程为首先在环境目录中查找相对于其路径的库。 它不是Python标准库的一部分，但是由PyPA（Python Packaging Authority）正式获得祝福。 激活后，您可以使用pip在虚拟环境中安装软件包。</p><ul><li><p>pyenv用于隔离Python版本。 例如，您可能希望根据Python 2.6,2.7,3.3,3.4和3.5测试代码，因此您需要一种在它们之间切换的方法。 一旦被激活，它将在PATH环境变量~/.pyenv/shims加上~/.pyenv/shims ，其中有与Python命令（ python ， pip ）匹配的特殊文件。 这些不是Python发出的命令的副本; 它们是基于PYENV_VERSION环境变量或.python-version文件或~/.pyenv/version文件运行的Python版本的特殊脚本。 pyenv也使得使用命令pyenv install更容易地下载和安装多个Python版本的过程。</p></li><li><p>pyenv-virtualenv是与pyenv相同的作者pyenv的插件，可以方便地同时使用pyenv和virtualenv 。 但是，如果您使用的是Python 3.3或更高版本， pyenv-virtualenv将尝试运行python -m venv如果可用），而不是virtualenv 。 如果您不想要方便的功能，您可以在不使用pyenv-virtualenv情况下使用virtualenv和pyenv 。</p></li><li><p>virtualenvwrapper是一组对virtualenv的扩展（请参阅docs ）。 它给你的命令像mkvirtualenv ， lssitepackages ，特别是在不同的virtualenv目录之间切换的工作。 如果您想要多个virtualenv目录，此工具特别有用。</p></li><li><p>pyenv-virtualenvwrapper是与pyenv相同的作者的pyenv ，方便地将virtualenvwrapper集成到pyenv 。</p></li><li><p>pipenv ，Kenneth Reitz（ requests的作者），是一个全新的（可能是实验性的）项目，旨在将Pipfile，pip和virtualenv组合成一个命令行命令。</p></li></ul><h2 id="标准库："><a href="#标准库：" class="headerlink" title="标准库："></a>标准库：</h2><ul><li><p>pyvenv是Python 3附带的一个脚本，但是在Python 3.6中已经弃用，因为它有问题（更不用说混淆的名字）。 在Python 3.6+中，完全相同的是python3 -m venv 。</p></li><li><p>venv是Python 3附带的软件包，您可以使用python3 -m venv运行（尽管某些原因有些发行版将其分离成独立的发行版包，如Ubuntu / Debian中的python3-venv ）。 它为virtualenv提供了类似的目的，并以非常类似的方式工作，但它不需要复制Python二进制文件（Windows除外）。 如果您不需要支持Python 2，请使用此功能。在撰写本文时，Python社区似乎对virtualenv感到满意，我没有听说过venv 。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PyPI软件包不在标准库中：&quot;&gt;&lt;a href=&quot;#PyPI软件包不在标准库中：&quot; class=&quot;headerlink&quot; title=&quot;PyPI软件包不在标准库中：&quot;&gt;&lt;/a&gt;PyPI软件包不在标准库中：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;virtualenv是一个非常受
      
    
    </summary>
    
      <category term="python" scheme="http://www.codr.top/categories/python/"/>
    
    
      <category term="后端" scheme="http://www.codr.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="http://www.codr.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>java中long型string型ip地址转换</title>
    <link href="http://www.codr.top/2018/05/Java/java%E4%B8%ADlong%E5%9E%8Bstring%E5%9E%8Bip%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/"/>
    <id>http://www.codr.top/2018/05/Java/java中long型string型ip地址转换/</id>
    <published>2018-05-17T01:52:23.000Z</published>
    <updated>2018-05-24T09:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public class IPConvertor &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * long转ip地址，大端（高位字节放在低地址端）</div><div class="line">     * @param ip</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String numToIPBigEndian(long ip) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        for (int i = 0; i &lt;= 3; i++) &#123;</div><div class="line">            sb.append((ip &gt;&gt;&gt; (i * 8)) &amp; 0x000000ff);</div><div class="line">            if (i != 3) &#123;</div><div class="line">                sb.append(&apos;.&apos;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * long转ip地址，小端（低位字节放在低地址端）</div><div class="line">     * @param ip</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String numToIPLittleEndian(long ip) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        for (int i = 3; i &gt;= 0; i--) &#123;</div><div class="line">            sb.append((ip &gt;&gt;&gt; (i * 8)) &amp; 0x000000ff);</div><div class="line">            if (i != 0) &#123;</div><div class="line">                sb.append(&apos;.&apos;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static long ipToNumLittle(String ip) &#123;</div><div class="line">        long num = 0;</div><div class="line">        String[] sections = ip.split(&quot;\\.&quot;);</div><div class="line">        int i = 3;</div><div class="line">        for (String str : sections) &#123;</div><div class="line">            num += (Long.parseLong(str) &lt;&lt; (i * 8));</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        return num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // public static void main(String[] args) &#123;</div><div class="line">    //     long ip =571108042;</div><div class="line">    //     String numToIPBigEndian = numToIPBigEndian(ip);</div><div class="line">    //     System.out.println(numToIPBigEndian);</div><div class="line">    //     System.out.println(numToIPBigEndian(1338832698));</div><div class="line">    //     System.out.println(numToIPBigEndian(1624045370));</div><div class="line">    //     System.out.println(numToIPBigEndian(1725232954));</div><div class="line">    // &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
      <category term="java" scheme="http://www.codr.top/categories/java/"/>
    
    
      <category term="string" scheme="http://www.codr.top/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>EFK的索引清理</title>
    <link href="http://www.codr.top/2018/05/ELK/EFK%E7%9A%84%E7%B4%A2%E5%BC%95%E6%B8%85%E7%90%86/"/>
    <id>http://www.codr.top/2018/05/ELK/EFK的索引清理/</id>
    <published>2018-05-16T12:36:33.000Z</published>
    <updated>2018-09-18T13:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>近发现elasticsearch近期索引文件大的吓人，清理了下之前的索引文件，发现服务器性能大大的减轻了一半，想一直保留近一个月的索引文件，但是又不想每个月手动清楚，在此写了一个小脚本</p><p>一、 手动删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf *2016-07-*</div></pre></td></tr></table></figure></p><p>二、api删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XDELETE &apos;http://127.0.0.1:9200/logstash-2017-10-*&apos;</div></pre></td></tr></table></figure><p>清理掉了所有 7月份的索引文件，我发现curl 删除比rm删除要快出很多</p><p>三、脚本加api删除（推荐）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cat es-index-clear.sh</div><div class="line">#/bin/bash</div><div class="line">#es-index-clear</div><div class="line">#获取上个月份日期</div><div class="line">LAST_DATA=`date -d &quot;last month&quot;+%Y-%m`</div><div class="line">#删除上个月份所有的索引</div><div class="line">curl -XDELETE&apos;http://127.0.0.1:9200/*-&apos;$&#123;LAST_DATA&#125;&apos;-*&apos;</div></pre></td></tr></table></figure><p>四、添加到任务计划<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crontab -e</div><div class="line">0 1 5 * * /script/es-index-clear.sh</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近发现elasticsearch近期索引文件大的吓人，清理了下之前的索引文件，发现服务器性能大大的减轻了一半，想一直保留近一个月的索引文件，但是又不想每个月手动清楚，在此写了一个小脚本&lt;/p&gt;
&lt;p&gt;一、 手动删除&lt;br&gt;&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="ELK" scheme="http://www.codr.top/categories/ELK/"/>
    
    
      <category term="日志系统" scheme="http://www.codr.top/tags/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="ELK" scheme="http://www.codr.top/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>python安装使用</title>
    <link href="http://www.codr.top/2018/05/python/python%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.codr.top/2018/05/python/python安装使用/</id>
    <published>2018-05-14T14:32:24.000Z</published>
    <updated>2018-09-18T13:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew search python</div><div class="line">brew install python3</div></pre></td></tr></table></figure><h2 id="Setuptools-amp-Pip"><a href="#Setuptools-amp-Pip" class="headerlink" title="Setuptools &amp; Pip"></a>Setuptools &amp; Pip</h2><p>setuptools 和 pip 是最重要的两个Python第三方软件包。一旦安装了它们，就可以通过一条指令下载、安装和卸载可获取到的 Python应用包，还可以轻松地将这种网络安装的方式加入到自己开发的Python应用中。<br>Python 2.7.9 以及之后版本(Python2 系列)，和Python 3.4以及之后版本均默认包含pip。<br>运行以下命令行代码检查pip是否已经安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command -v pip</div></pre></td></tr></table></figure></p><p>pip 用于Python 2的，而 pip3 用于Python 3。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command -v pip3</div></pre></td></tr></table></figure></p><p>安装方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl安装</div><div class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</div><div class="line">python get-pip.py</div><div class="line"></div><div class="line">yum 安装</div><div class="line">yum -y install python-pip</div></pre></td></tr></table></figure></p><h2 id="Pipenv安装"><a href="#Pipenv安装" class="headerlink" title="Pipenv安装"></a>Pipenv安装</h2><p>Pipenv 是一个 Python 项目依赖管理工具，如果你熟悉 Node.js 的 npm 或者 Ruby 的 bundler ，他们是和 Pipenv 非常相似的工具。尽管 pip 也可以安装 Python 的包，但是 Pipenv 被推荐的理由是因为 Pipenv 为使用者提供了更加方便的依赖管理。<br>虚拟环境是保持项目依赖独立的一种方式，Pipenv 是实现这种方式的其中一个工具，同时 Pipenv 也是一个依赖管理工具，也就是说 Pipenv 集成了 pip 和 virtual environment 的功能，通过创建虚拟环境，可以保证项目之间的的依赖互不干扰。</p><p>pip 安装 Pipenv ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install --user pipenv</div></pre></td></tr></table></figure></p><p>通过运行 python -m site –user-base 找到 用户基础目录，然后把 bin 加到目录末尾。通过 修改 ~/.profile 永久地设置 PATH。</p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>virtualenv 是一个创建独立的 Python 环境。 virtualenv 会创建一个文件夹，其中包含使用 Python 项目所有所需的可执行文件。<br>它可以单独使用，用于代替 Pipenv 。<br>pip 安装 virtualenv ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip3 install virtualenv</div><div class="line">$ virtualenv --version</div></pre></td></tr></table></figure></p><ol><li>为项目创建一个虚拟环境：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd my_project_folder</div><div class="line">$ virtualenv my_project</div></pre></td></tr></table></figure></li></ol><p>virtualenv my_project 将会在当前目录创建一个文件夹来存放 Python 的可执行文件以及拷贝一份 pip 库，这样就能安装其他包了。</p><ol><li>开始使用虚拟环境前，需要先激活：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source my_project/bin/activate</div></pre></td></tr></table></figure></li></ol><p>你所添加的扩展和运行的环境， 都处于这个隔离环境中了， 如果还需要一个python3.5的环境， 你可以在安装好python3.5（不要在任何隔离环境中）后， 创建隔离环境时，指定python版本即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv -p python3.5 py3.5</div><div class="line">virtualenv -p /usr/bin/python2.7 my_project</div></pre></td></tr></table></figure></p><ol><li>如果你在虚拟环境中暂时完成了工作，可以这样停用它：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ deactivate</div></pre></td></tr></table></figure></li></ol><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>virtualenvwrapper 是virtualenv的一些列扩展，它提供了诸如 mkvirtualenv, lssitepackages 等命令行工具，特别是 workon 命令行工具，当你需要使用多个virtualenv目录时使用该工具特别方便。<br>它把您所有的虚拟环境都放在一个地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pip install virtualenvwrapper</div><div class="line">$ export WORKON_HOME=~/Envs</div><div class="line">$ source /usr/local/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure></p><h2 id="virtualenv-burrito"><a href="#virtualenv-burrito" class="headerlink" title="virtualenv-burrito"></a>virtualenv-burrito</h2><p>使用 virtualenv-burrito ，你可以只要使用一条命令就将 virtualenv + virtualenvwrapper 环境搭建起来。</p><h2 id="autoenv"><a href="#autoenv" class="headerlink" title="autoenv"></a>autoenv</h2><p>当您 cd 进入一个包含 .env 的目录中，就会 autoenv 自动激活那个环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install autoenv</div></pre></td></tr></table></figure></p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="external">http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python安装&quot;&gt;&lt;a href=&quot;#python安装&quot; class=&quot;headerlink&quot; title=&quot;python安装&quot;&gt;&lt;/a&gt;python安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="python" scheme="http://www.codr.top/categories/python/"/>
    
    
      <category term="python" scheme="http://www.codr.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库角色</title>
    <link href="http://www.codr.top/2018/05/MongoDB/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%92%E8%89%B2/"/>
    <id>http://www.codr.top/2018/05/MongoDB/MongoDB数据库角色/</id>
    <published>2018-05-11T10:41:46.000Z</published>
    <updated>2018-09-18T01:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内建的角色"><a href="#内建的角色" class="headerlink" title="内建的角色"></a>内建的角色</h2><p>数据库用户角色：read、readWrite;<br>数据库管理角色：dbAdmin、dbOwner、userAdmin；<br>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；<br>备份恢复角色：backup、restore；<br>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase<br>超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）<br>内部角色：__system</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">角色说明：</div><div class="line">Read：允许用户读取指定数据库</div><div class="line">readWrite：允许用户读写指定数据库</div><div class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</div><div class="line">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</div><div class="line">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</div><div class="line">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</div><div class="line">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</div><div class="line">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</div><div class="line">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</div><div class="line">root：只在admin数据库中可用。超级账号，超级权限</div></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://www.jianshu.com/p/a4e94bb8a052" target="_blank" rel="external">https://www.jianshu.com/p/a4e94bb8a052</a><br><a href="https://docs.mongodb.com/manual/reference/built-in-roles/#built-in-roles" target="_blank" rel="external">https://docs.mongodb.com/manual/reference/built-in-roles/#built-in-roles</a><br><a href="https://link.jianshu.com/?t=https://docs.mongodb.com/manual/reference/configuration-options/" target="_blank" rel="external">https://link.jianshu.com/?t=https://docs.mongodb.com/manual/reference/configuration-options/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内建的角色&quot;&gt;&lt;a href=&quot;#内建的角色&quot; class=&quot;headerlink&quot; title=&quot;内建的角色&quot;&gt;&lt;/a&gt;内建的角色&lt;/h2&gt;&lt;p&gt;数据库用户角色：read、readWrite;&lt;br&gt;数据库管理角色：dbAdmin、dbOwner、userAdm
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://www.codr.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://www.codr.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>docker仓库Registry</title>
    <link href="http://www.codr.top/2018/05/Docker/docker%E4%BB%93%E5%BA%93Registry/"/>
    <id>http://www.codr.top/2018/05/Docker/docker仓库Registry/</id>
    <published>2018-05-10T07:55:45.000Z</published>
    <updated>2018-09-18T13:38:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>仓库Registry 方便保存和分发镜像，Docker Hub 是 Docker 公司维护的公共 Registry。用户可以将自己的镜像保存到 Docker Hub 免费的 repository 中。</p><ol><li><p>Docker Hub 上注册一个账号<br><a href="https://hub.docker.com/" target="_blank" rel="external">https://hub.docker.com/</a></p></li><li><p>登录<br>注意使用docker id登录，不要使用邮箱登录。不然会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error response from daemon: Get https://registry-1.docker.io/v2/: unauthorized: incorrect username or password</div></pre></td></tr></table></figure></li><li><p>docker tag 命令重命名镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag centos-vim-f 842071912/centos-vim-f:v1</div></pre></td></tr></table></figure></li><li><p>docker push 842071912/centos-vim-f</p></li><li>docker pull 拉取镜像</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;仓库Registry 方便保存和分发镜像，Docker Hub 是 Docker 公司维护的公共 Registry。用户可以将自己的镜像保存到 Docker Hub 免费的 repository 中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Docker Hub 上注册一个账号&lt;b
      
    
    </summary>
    
      <category term="docker" scheme="http://www.codr.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.codr.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装使用</title>
    <link href="http://www.codr.top/2018/05/MongoDB/MongoDB%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.codr.top/2018/05/MongoDB/MongoDB安装使用/</id>
    <published>2018-05-09T09:00:14.000Z</published>
    <updated>2018-12-14T12:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>vim /etc/yum.repos.d/mongodb-org-3.6.repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mongodb-org-3.6][mongodb-org-3.6]</div><div class="line"> namename==MongoDB RepositoryMongoDB Repository</div><div class="line"> baseurlbaseurl==https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/https://repo.mongodb.org/yum/redha </div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</div></pre></td></tr></table></figure></p><p>修改数据文件存储位置<br>vim /etc/mongod.conf 中的dbPath</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y mongodb-org</div><div class="line">mongod #启动 3.6.4 启动 service mongod start</div><div class="line">mongo #进入命令行交互</div></pre></td></tr></table></figure><h2 id="开启认证"><a href="#开启认证" class="headerlink" title="开启认证"></a>开启认证</h2><ol><li>MongoDB是没有默认管理员账号，所以要先添加管理员账号，再开启权限认证。</li><li>切换到admin数据库，添加的账号才是管理员账号。</li><li>用户只能在用户所在数据库登录，包括管理员账号。</li><li>管理员可以管理所有数据库，但是不能直接管理其他数据库，要先在admin数据库认证后才可以<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">// 创建用户</div><div class="line">db.createUser(</div><div class="line">  &#123;</div><div class="line">    user: &quot;admin&quot;,</div><div class="line">    pwd: &quot;admin&quot;,</div><div class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</div><div class="line">  &#125;</div><div class="line">)</div><div class="line"></div><div class="line">// 删除用户</div><div class="line">db.dropUser(用户名);</div><div class="line"></div><div class="line">// 查看用户权限</div><div class="line">db.runCommand(</div><div class="line">  &#123;</div><div class="line">    usersInfo:&quot;fastschooladmin&quot;,</div><div class="line">    showPrivileges:true</div><div class="line">  &#125;</div><div class="line">)</div><div class="line"></div><div class="line">// 查看当前用户</div><div class="line">db.runCommand(&#123;connectionStatus : 1&#125;)</div><div class="line"></div><div class="line">// 修改用户密码</div><div class="line">db.changeUserPassword(用户名, 新密码);</div></pre></td></tr></table></figure></li></ol><p>修改文件<br>vim /etc/mongod.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">security:</div><div class="line">  authorization: enabled</div></pre></td></tr></table></figure></p><p>重启mongod</p><p>修改提示信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">You can also add the user name to prompt by overriding the prompt function in .mongorc.js file, under OS user home directory. Roughly:</div><div class="line"></div><div class="line">prompt = function() &#123;</div><div class="line">    user = db.runCommand(&#123;connectionStatus : 1&#125;).authInfo.authenticatedUsers[0]</div><div class="line">    if (user) &#123;</div><div class="line">        return &quot;user: &quot; + user.user + &quot;&gt;&quot;</div><div class="line">    &#125;</div><div class="line">    return &quot;&gt;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>show dbs显示数据库列表</li><li>db 显示当前数据库对象或集合</li><li>use local 切换数据库，如果数据库不存在，则创建数据库，否则切换到指定数据库。<br>如果刚创建的数据库在show dbs看不到，需要先插入数据才能看到。</li><li>db.dropDatabase() 删除数据库</li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ol><li>show tables 查看集合</li><li>db.createCollection(name, options) 创建集合<br>或者当你插入一些文档时，MongoDB 会自动创建集合。</li><li>db.集合名.drop() 删除集合</li></ol><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ol><li>db.COLLECTION_NAME.insert(document) 插入文档</li><li><p>update() 和 save() 方法来更新集合中的文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">query : update的查询条件，类似sql update查询内where后面的。</div><div class="line">update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</div><div class="line">upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</div><div class="line">multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</div><div class="line">writeConcern :可选，抛出异常的级别。</div></pre></td></tr></table></figure></li><li><p>db.集合名.remove() 删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.collection.remove(</div><div class="line">   &lt;query&gt;,</div><div class="line">   &#123;</div><div class="line">     justOne: &lt;boolean&gt;,</div><div class="line">     writeConcern: &lt;document&gt;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></li></ol><p>参数说明：<br>query :（可选）删除的文档的条件。<br>justOne : （可选）如果设为 true 或 1，则只删除一个文档。<br>writeConcern :（可选）抛出异常的级别。</p><p>删除所有数据：db.col.remove({})</p><ol><li>db.集合名.find(query, projection)<br>参数说明：<br>query ：可选，使用查询操作符指定查询条件<br>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ol><p>以易读格式输出<br>db.col.find().pretty()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">等于  &#123;&lt;key&gt;:&lt;value&gt;&#125;</div><div class="line">小于  &#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;   </div><div class="line">小于或等于   &#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</div><div class="line">大于  &#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</div><div class="line">大于或等于   &#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</div><div class="line">不等于 &#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</div></pre></td></tr></table></figure><p>AND 条件<br>db.col.find({key1:value1, key2:value2}).pretty()</p><p>OR 条件<br>db.col.find({$or: [{key1: value1}, {key2:value2}).pretty()</p><ol><li>limit()指定数量的数据记录</li><li>sort() 排序</li><li>ensureIndex()<br>db.COLLECTION_NAME.ensureIndex({KEY:1})<br>1为指定按升序创建索引，如果你想按降序来创建索引指定为-1即可</li><li>aggregate()  用于处理数据(诸如统计平均值,求和等)<br>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</li><li>MongoDB时间少8小时<br>自带的Date，时间是UTC的时间，和咱们中国时区少8个小时。使用Robomongo，可以通过”Options” - “Display Dates in…” - “Local Timezone”来设置显示本地时间。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h2&gt;&lt;p&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://www.codr.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://www.codr.top/tags/MongoDB/"/>
    
  </entry>
  
</feed>
